// source: alert.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this
  }.call(null) ||
  Function('return this')()

goog.exportSymbol('proto.network.forta.APIAlert', null, global)
goog.exportSymbol('proto.network.forta.APIAlert.APIAlertAgent', null, global)
goog.exportSymbol('proto.network.forta.AgentInfo', null, global)
goog.exportSymbol('proto.network.forta.Alert', null, global)
goog.exportSymbol('proto.network.forta.AlertResponse', null, global)
goog.exportSymbol('proto.network.forta.AlertType', null, global)
goog.exportSymbol('proto.network.forta.BloomFilter', null, global)
goog.exportSymbol('proto.network.forta.Finding', null, global)
goog.exportSymbol('proto.network.forta.Finding.FindingType', null, global)
goog.exportSymbol('proto.network.forta.Finding.Severity', null, global)
goog.exportSymbol('proto.network.forta.Label', null, global)
goog.exportSymbol('proto.network.forta.Label.EntityType', null, global)
goog.exportSymbol('proto.network.forta.ScannerInfo', null, global)
goog.exportSymbol('proto.network.forta.Signature', null, global)
goog.exportSymbol('proto.network.forta.SignedAlert', null, global)
goog.exportSymbol('proto.network.forta.Source', null, global)
goog.exportSymbol('proto.network.forta.Source.AlertSource', null, global)
goog.exportSymbol('proto.network.forta.Source.BlockSource', null, global)
goog.exportSymbol('proto.network.forta.Source.ChainSource', null, global)
goog.exportSymbol('proto.network.forta.Source.CustomSource', null, global)
goog.exportSymbol('proto.network.forta.Source.TransactionSource', null, global)
goog.exportSymbol('proto.network.forta.Source.URLSource', null, global)
goog.exportSymbol('proto.network.forta.TrackingTimestamps', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.TrackingTimestamps = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.TrackingTimestamps, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.TrackingTimestamps.displayName = 'proto.network.forta.TrackingTimestamps'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.AgentInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.AgentInfo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.AgentInfo.displayName = 'proto.network.forta.AgentInfo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.ScannerInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.ScannerInfo, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.ScannerInfo.displayName = 'proto.network.forta.ScannerInfo'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.AlertResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.AlertResponse.repeatedFields_, null)
}
goog.inherits(proto.network.forta.AlertResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.AlertResponse.displayName = 'proto.network.forta.AlertResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.Signature = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.Signature, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.Signature.displayName = 'proto.network.forta.Signature'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.BloomFilter = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.BloomFilter, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.BloomFilter.displayName = 'proto.network.forta.BloomFilter'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.Alert = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.Alert, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.Alert.displayName = 'proto.network.forta.Alert'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.SignedAlert = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.SignedAlert, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.SignedAlert.displayName = 'proto.network.forta.SignedAlert'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.Label = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.Label.repeatedFields_, null)
}
goog.inherits(proto.network.forta.Label, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.Label.displayName = 'proto.network.forta.Label'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.Source = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.Source.repeatedFields_, null)
}
goog.inherits(proto.network.forta.Source, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.Source.displayName = 'proto.network.forta.Source'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.Source.TransactionSource = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.Source.TransactionSource, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.Source.TransactionSource.displayName = 'proto.network.forta.Source.TransactionSource'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.Source.BlockSource = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.Source.BlockSource, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.Source.BlockSource.displayName = 'proto.network.forta.Source.BlockSource'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.Source.URLSource = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.Source.URLSource, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.Source.URLSource.displayName = 'proto.network.forta.Source.URLSource'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.Source.ChainSource = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.Source.ChainSource, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.Source.ChainSource.displayName = 'proto.network.forta.Source.ChainSource'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.Source.AlertSource = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.Source.AlertSource, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.Source.AlertSource.displayName = 'proto.network.forta.Source.AlertSource'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.Source.CustomSource = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.Source.CustomSource, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.Source.CustomSource.displayName = 'proto.network.forta.Source.CustomSource'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.Finding = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.Finding.repeatedFields_, null)
}
goog.inherits(proto.network.forta.Finding, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.Finding.displayName = 'proto.network.forta.Finding'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.APIAlert = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.APIAlert, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.APIAlert.displayName = 'proto.network.forta.APIAlert'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.APIAlert.APIAlertAgent = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.APIAlert.APIAlertAgent, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.APIAlert.APIAlertAgent.displayName = 'proto.network.forta.APIAlert.APIAlertAgent'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.TrackingTimestamps.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.TrackingTimestamps.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.TrackingTimestamps} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.TrackingTimestamps.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        block: jspb.Message.getFieldWithDefault(msg, 1, ''),
        feed: jspb.Message.getFieldWithDefault(msg, 2, ''),
        botrequest: jspb.Message.getFieldWithDefault(msg, 3, ''),
        botresponse: jspb.Message.getFieldWithDefault(msg, 4, ''),
        sourcealert: jspb.Message.getFieldWithDefault(msg, 5, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.TrackingTimestamps}
 */
proto.network.forta.TrackingTimestamps.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.TrackingTimestamps()
  return proto.network.forta.TrackingTimestamps.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.TrackingTimestamps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.TrackingTimestamps}
 */
proto.network.forta.TrackingTimestamps.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlock(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setFeed(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setBotrequest(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setBotresponse(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setSourcealert(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.TrackingTimestamps.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.TrackingTimestamps.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.TrackingTimestamps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.TrackingTimestamps.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getBlock()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getFeed()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getBotrequest()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getBotresponse()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getSourcealert()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
}

/**
 * optional string block = 1;
 * @return {string}
 */
proto.network.forta.TrackingTimestamps.prototype.getBlock = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TrackingTimestamps} returns this
 */
proto.network.forta.TrackingTimestamps.prototype.setBlock = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string feed = 2;
 * @return {string}
 */
proto.network.forta.TrackingTimestamps.prototype.getFeed = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TrackingTimestamps} returns this
 */
proto.network.forta.TrackingTimestamps.prototype.setFeed = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string botRequest = 3;
 * @return {string}
 */
proto.network.forta.TrackingTimestamps.prototype.getBotrequest = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TrackingTimestamps} returns this
 */
proto.network.forta.TrackingTimestamps.prototype.setBotrequest = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string botResponse = 4;
 * @return {string}
 */
proto.network.forta.TrackingTimestamps.prototype.getBotresponse = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TrackingTimestamps} returns this
 */
proto.network.forta.TrackingTimestamps.prototype.setBotresponse = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string sourceAlert = 5;
 * @return {string}
 */
proto.network.forta.TrackingTimestamps.prototype.getSourcealert = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TrackingTimestamps} returns this
 */
proto.network.forta.TrackingTimestamps.prototype.setSourcealert = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.AgentInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.AgentInfo.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.AgentInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.AgentInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        image: jspb.Message.getFieldWithDefault(msg, 1, ''),
        imagehash: jspb.Message.getFieldWithDefault(msg, 2, ''),
        id: jspb.Message.getFieldWithDefault(msg, 3, ''),
        istest: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
        manifest: jspb.Message.getFieldWithDefault(msg, 5, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.AgentInfo}
 */
proto.network.forta.AgentInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.AgentInfo()
  return proto.network.forta.AgentInfo.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.AgentInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.AgentInfo}
 */
proto.network.forta.AgentInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setImage(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setImagehash(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setId(value)
        break
      case 4:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setIstest(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setManifest(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.AgentInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.AgentInfo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.AgentInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.AgentInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getImage()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getImagehash()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getId()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getIstest()
  if (f) {
    writer.writeBool(4, f)
  }
  f = message.getManifest()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
}

/**
 * optional string image = 1;
 * @return {string}
 */
proto.network.forta.AgentInfo.prototype.getImage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AgentInfo} returns this
 */
proto.network.forta.AgentInfo.prototype.setImage = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string imageHash = 2;
 * @return {string}
 */
proto.network.forta.AgentInfo.prototype.getImagehash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AgentInfo} returns this
 */
proto.network.forta.AgentInfo.prototype.setImagehash = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string id = 3;
 * @return {string}
 */
proto.network.forta.AgentInfo.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AgentInfo} returns this
 */
proto.network.forta.AgentInfo.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional bool isTest = 4;
 * @return {boolean}
 */
proto.network.forta.AgentInfo.prototype.getIstest = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false))
}

/**
 * @param {boolean} value
 * @return {!proto.network.forta.AgentInfo} returns this
 */
proto.network.forta.AgentInfo.prototype.setIstest = function (value) {
  return jspb.Message.setProto3BooleanField(this, 4, value)
}

/**
 * optional string manifest = 5;
 * @return {string}
 */
proto.network.forta.AgentInfo.prototype.getManifest = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AgentInfo} returns this
 */
proto.network.forta.AgentInfo.prototype.setManifest = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.ScannerInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.ScannerInfo.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.ScannerInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.ScannerInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.ScannerInfo}
 */
proto.network.forta.ScannerInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.ScannerInfo()
  return proto.network.forta.ScannerInfo.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.ScannerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.ScannerInfo}
 */
proto.network.forta.ScannerInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddress(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.ScannerInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.ScannerInfo.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.ScannerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.ScannerInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddress()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string address = 1;
 * @return {string}
 */
proto.network.forta.ScannerInfo.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.ScannerInfo} returns this
 */
proto.network.forta.ScannerInfo.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.AlertResponse.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.AlertResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.AlertResponse.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.AlertResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.AlertResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        alertsList: jspb.Message.toObjectList(
          msg.getAlertsList(),
          proto.network.forta.SignedAlert.toObject,
          includeInstance,
        ),
        nextpagetoken: jspb.Message.getFieldWithDefault(msg, 2, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.AlertResponse}
 */
proto.network.forta.AlertResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.AlertResponse()
  return proto.network.forta.AlertResponse.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.AlertResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.AlertResponse}
 */
proto.network.forta.AlertResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.network.forta.SignedAlert()
        reader.readMessage(value, proto.network.forta.SignedAlert.deserializeBinaryFromReader)
        msg.addAlerts(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setNextpagetoken(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.AlertResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.AlertResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.AlertResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.AlertResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAlertsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.network.forta.SignedAlert.serializeBinaryToWriter)
  }
  f = message.getNextpagetoken()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
}

/**
 * repeated SignedAlert alerts = 1;
 * @return {!Array<!proto.network.forta.SignedAlert>}
 */
proto.network.forta.AlertResponse.prototype.getAlertsList = function () {
  return /** @type{!Array<!proto.network.forta.SignedAlert>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.SignedAlert, 1)
  )
}

/**
 * @param {!Array<!proto.network.forta.SignedAlert>} value
 * @return {!proto.network.forta.AlertResponse} returns this
 */
proto.network.forta.AlertResponse.prototype.setAlertsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.network.forta.SignedAlert=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.SignedAlert}
 */
proto.network.forta.AlertResponse.prototype.addAlerts = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.network.forta.SignedAlert, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.AlertResponse} returns this
 */
proto.network.forta.AlertResponse.prototype.clearAlertsList = function () {
  return this.setAlertsList([])
}

/**
 * optional string nextPageToken = 2;
 * @return {string}
 */
proto.network.forta.AlertResponse.prototype.getNextpagetoken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertResponse} returns this
 */
proto.network.forta.AlertResponse.prototype.setNextpagetoken = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.Signature.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.Signature.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.Signature} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.Signature.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        signature: jspb.Message.getFieldWithDefault(msg, 1, ''),
        algorithm: jspb.Message.getFieldWithDefault(msg, 2, ''),
        signer: jspb.Message.getFieldWithDefault(msg, 3, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.Signature}
 */
proto.network.forta.Signature.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.Signature()
  return proto.network.forta.Signature.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.Signature}
 */
proto.network.forta.Signature.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setSignature(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setAlgorithm(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setSigner(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.Signature.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.Signature.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.Signature.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getSignature()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getAlgorithm()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getSigner()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
}

/**
 * optional string signature = 1;
 * @return {string}
 */
proto.network.forta.Signature.prototype.getSignature = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Signature} returns this
 */
proto.network.forta.Signature.prototype.setSignature = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string algorithm = 2;
 * @return {string}
 */
proto.network.forta.Signature.prototype.getAlgorithm = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Signature} returns this
 */
proto.network.forta.Signature.prototype.setAlgorithm = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string signer = 3;
 * @return {string}
 */
proto.network.forta.Signature.prototype.getSigner = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Signature} returns this
 */
proto.network.forta.Signature.prototype.setSigner = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.BloomFilter.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.BloomFilter.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.BloomFilter} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.BloomFilter.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        k: jspb.Message.getFieldWithDefault(msg, 1, ''),
        m: jspb.Message.getFieldWithDefault(msg, 2, ''),
        bitset: jspb.Message.getFieldWithDefault(msg, 3, ''),
        itemcount: jspb.Message.getFieldWithDefault(msg, 4, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.BloomFilter}
 */
proto.network.forta.BloomFilter.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.BloomFilter()
  return proto.network.forta.BloomFilter.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.BloomFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.BloomFilter}
 */
proto.network.forta.BloomFilter.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setK(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setM(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setBitset(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setItemcount(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.BloomFilter.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.BloomFilter.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.BloomFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.BloomFilter.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getK()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getM()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getBitset()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getItemcount()
  if (f !== 0) {
    writer.writeUint32(4, f)
  }
}

/**
 * optional string k = 1;
 * @return {string}
 */
proto.network.forta.BloomFilter.prototype.getK = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BloomFilter} returns this
 */
proto.network.forta.BloomFilter.prototype.setK = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string m = 2;
 * @return {string}
 */
proto.network.forta.BloomFilter.prototype.getM = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BloomFilter} returns this
 */
proto.network.forta.BloomFilter.prototype.setM = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string bitset = 3;
 * @return {string}
 */
proto.network.forta.BloomFilter.prototype.getBitset = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BloomFilter} returns this
 */
proto.network.forta.BloomFilter.prototype.setBitset = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional uint32 itemCount = 4;
 * @return {number}
 */
proto.network.forta.BloomFilter.prototype.getItemcount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.BloomFilter} returns this
 */
proto.network.forta.BloomFilter.prototype.setItemcount = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.Alert.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.Alert.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.Alert} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.Alert.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        type: jspb.Message.getFieldWithDefault(msg, 2, 0),
        finding: (f = msg.getFinding()) && proto.network.forta.Finding.toObject(includeInstance, f),
        timestamp: jspb.Message.getFieldWithDefault(msg, 4, ''),
        metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
        agent: (f = msg.getAgent()) && proto.network.forta.AgentInfo.toObject(includeInstance, f),
        tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
        scanner: (f = msg.getScanner()) && proto.network.forta.ScannerInfo.toObject(includeInstance, f),
        timestamps: (f = msg.getTimestamps()) && proto.network.forta.TrackingTimestamps.toObject(includeInstance, f),
        truncated: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
        addressbloomfilter:
          (f = msg.getAddressbloomfilter()) && proto.network.forta.BloomFilter.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.Alert}
 */
proto.network.forta.Alert.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.Alert()
  return proto.network.forta.Alert.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.Alert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.Alert}
 */
proto.network.forta.Alert.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setId(value)
        break
      case 2:
        var value = /** @type {!proto.network.forta.AlertType} */ (reader.readEnum())
        msg.setType(value)
        break
      case 3:
        var value = new proto.network.forta.Finding()
        reader.readMessage(value, proto.network.forta.Finding.deserializeBinaryFromReader)
        msg.setFinding(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setTimestamp(value)
        break
      case 5:
        var value = msg.getMetadataMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            '',
          )
        })
        break
      case 6:
        var value = new proto.network.forta.AgentInfo()
        reader.readMessage(value, proto.network.forta.AgentInfo.deserializeBinaryFromReader)
        msg.setAgent(value)
        break
      case 7:
        var value = msg.getTagsMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            '',
          )
        })
        break
      case 8:
        var value = new proto.network.forta.ScannerInfo()
        reader.readMessage(value, proto.network.forta.ScannerInfo.deserializeBinaryFromReader)
        msg.setScanner(value)
        break
      case 9:
        var value = new proto.network.forta.TrackingTimestamps()
        reader.readMessage(value, proto.network.forta.TrackingTimestamps.deserializeBinaryFromReader)
        msg.setTimestamps(value)
        break
      case 10:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setTruncated(value)
        break
      case 11:
        var value = new proto.network.forta.BloomFilter()
        reader.readMessage(value, proto.network.forta.BloomFilter.deserializeBinaryFromReader)
        msg.setAddressbloomfilter(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.Alert.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.Alert.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.Alert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.Alert.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getId()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(2, f)
  }
  f = message.getFinding()
  if (f != null) {
    writer.writeMessage(3, f, proto.network.forta.Finding.serializeBinaryToWriter)
  }
  f = message.getTimestamp()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getMetadataMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString)
  }
  f = message.getAgent()
  if (f != null) {
    writer.writeMessage(6, f, proto.network.forta.AgentInfo.serializeBinaryToWriter)
  }
  f = message.getTagsMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString)
  }
  f = message.getScanner()
  if (f != null) {
    writer.writeMessage(8, f, proto.network.forta.ScannerInfo.serializeBinaryToWriter)
  }
  f = message.getTimestamps()
  if (f != null) {
    writer.writeMessage(9, f, proto.network.forta.TrackingTimestamps.serializeBinaryToWriter)
  }
  f = message.getTruncated()
  if (f) {
    writer.writeBool(10, f)
  }
  f = message.getAddressbloomfilter()
  if (f != null) {
    writer.writeMessage(11, f, proto.network.forta.BloomFilter.serializeBinaryToWriter)
  }
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.network.forta.Alert.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional AlertType type = 2;
 * @return {!proto.network.forta.AlertType}
 */
proto.network.forta.Alert.prototype.getType = function () {
  return /** @type {!proto.network.forta.AlertType} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {!proto.network.forta.AlertType} value
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value)
}

/**
 * optional Finding finding = 3;
 * @return {?proto.network.forta.Finding}
 */
proto.network.forta.Alert.prototype.getFinding = function () {
  return /** @type{?proto.network.forta.Finding} */ (jspb.Message.getWrapperField(this, proto.network.forta.Finding, 3))
}

/**
 * @param {?proto.network.forta.Finding|undefined} value
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.setFinding = function (value) {
  return jspb.Message.setWrapperField(this, 3, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.clearFinding = function () {
  return this.setFinding(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.Alert.prototype.hasFinding = function () {
  return jspb.Message.getField(this, 3) != null
}

/**
 * optional string timestamp = 4;
 * @return {string}
 */
proto.network.forta.Alert.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * map<string, string> metadata = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.network.forta.Alert.prototype.getMetadataMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 5, opt_noLazyCreate, null))
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.clearMetadataMap = function () {
  this.getMetadataMap().clear()
  return this
}

/**
 * optional AgentInfo agent = 6;
 * @return {?proto.network.forta.AgentInfo}
 */
proto.network.forta.Alert.prototype.getAgent = function () {
  return /** @type{?proto.network.forta.AgentInfo} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.AgentInfo, 6)
  )
}

/**
 * @param {?proto.network.forta.AgentInfo|undefined} value
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.setAgent = function (value) {
  return jspb.Message.setWrapperField(this, 6, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.clearAgent = function () {
  return this.setAgent(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.Alert.prototype.hasAgent = function () {
  return jspb.Message.getField(this, 6) != null
}

/**
 * map<string, string> tags = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.network.forta.Alert.prototype.getTagsMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 7, opt_noLazyCreate, null))
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.clearTagsMap = function () {
  this.getTagsMap().clear()
  return this
}

/**
 * optional ScannerInfo scanner = 8;
 * @return {?proto.network.forta.ScannerInfo}
 */
proto.network.forta.Alert.prototype.getScanner = function () {
  return /** @type{?proto.network.forta.ScannerInfo} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.ScannerInfo, 8)
  )
}

/**
 * @param {?proto.network.forta.ScannerInfo|undefined} value
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.setScanner = function (value) {
  return jspb.Message.setWrapperField(this, 8, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.clearScanner = function () {
  return this.setScanner(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.Alert.prototype.hasScanner = function () {
  return jspb.Message.getField(this, 8) != null
}

/**
 * optional TrackingTimestamps timestamps = 9;
 * @return {?proto.network.forta.TrackingTimestamps}
 */
proto.network.forta.Alert.prototype.getTimestamps = function () {
  return /** @type{?proto.network.forta.TrackingTimestamps} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.TrackingTimestamps, 9)
  )
}

/**
 * @param {?proto.network.forta.TrackingTimestamps|undefined} value
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.setTimestamps = function (value) {
  return jspb.Message.setWrapperField(this, 9, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.clearTimestamps = function () {
  return this.setTimestamps(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.Alert.prototype.hasTimestamps = function () {
  return jspb.Message.getField(this, 9) != null
}

/**
 * optional bool truncated = 10;
 * @return {boolean}
 */
proto.network.forta.Alert.prototype.getTruncated = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false))
}

/**
 * @param {boolean} value
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.setTruncated = function (value) {
  return jspb.Message.setProto3BooleanField(this, 10, value)
}

/**
 * optional BloomFilter addressBloomFilter = 11;
 * @return {?proto.network.forta.BloomFilter}
 */
proto.network.forta.Alert.prototype.getAddressbloomfilter = function () {
  return /** @type{?proto.network.forta.BloomFilter} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.BloomFilter, 11)
  )
}

/**
 * @param {?proto.network.forta.BloomFilter|undefined} value
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.setAddressbloomfilter = function (value) {
  return jspb.Message.setWrapperField(this, 11, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.Alert} returns this
 */
proto.network.forta.Alert.prototype.clearAddressbloomfilter = function () {
  return this.setAddressbloomfilter(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.Alert.prototype.hasAddressbloomfilter = function () {
  return jspb.Message.getField(this, 11) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.SignedAlert.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.SignedAlert.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.SignedAlert} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.SignedAlert.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        alert: (f = msg.getAlert()) && proto.network.forta.Alert.toObject(includeInstance, f),
        signature: (f = msg.getSignature()) && proto.network.forta.Signature.toObject(includeInstance, f),
        chainid: jspb.Message.getFieldWithDefault(msg, 3, ''),
        blocknumber: jspb.Message.getFieldWithDefault(msg, 4, ''),
        publishedwithtx: jspb.Message.getFieldWithDefault(msg, 5, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.SignedAlert}
 */
proto.network.forta.SignedAlert.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.SignedAlert()
  return proto.network.forta.SignedAlert.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.SignedAlert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.SignedAlert}
 */
proto.network.forta.SignedAlert.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.network.forta.Alert()
        reader.readMessage(value, proto.network.forta.Alert.deserializeBinaryFromReader)
        msg.setAlert(value)
        break
      case 2:
        var value = new proto.network.forta.Signature()
        reader.readMessage(value, proto.network.forta.Signature.deserializeBinaryFromReader)
        msg.setSignature(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setChainid(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlocknumber(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setPublishedwithtx(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.SignedAlert.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.SignedAlert.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.SignedAlert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.SignedAlert.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAlert()
  if (f != null) {
    writer.writeMessage(1, f, proto.network.forta.Alert.serializeBinaryToWriter)
  }
  f = message.getSignature()
  if (f != null) {
    writer.writeMessage(2, f, proto.network.forta.Signature.serializeBinaryToWriter)
  }
  f = message.getChainid()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getBlocknumber()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getPublishedwithtx()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
}

/**
 * optional Alert alert = 1;
 * @return {?proto.network.forta.Alert}
 */
proto.network.forta.SignedAlert.prototype.getAlert = function () {
  return /** @type{?proto.network.forta.Alert} */ (jspb.Message.getWrapperField(this, proto.network.forta.Alert, 1))
}

/**
 * @param {?proto.network.forta.Alert|undefined} value
 * @return {!proto.network.forta.SignedAlert} returns this
 */
proto.network.forta.SignedAlert.prototype.setAlert = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.SignedAlert} returns this
 */
proto.network.forta.SignedAlert.prototype.clearAlert = function () {
  return this.setAlert(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.SignedAlert.prototype.hasAlert = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional Signature signature = 2;
 * @return {?proto.network.forta.Signature}
 */
proto.network.forta.SignedAlert.prototype.getSignature = function () {
  return /** @type{?proto.network.forta.Signature} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.Signature, 2)
  )
}

/**
 * @param {?proto.network.forta.Signature|undefined} value
 * @return {!proto.network.forta.SignedAlert} returns this
 */
proto.network.forta.SignedAlert.prototype.setSignature = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.SignedAlert} returns this
 */
proto.network.forta.SignedAlert.prototype.clearSignature = function () {
  return this.setSignature(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.SignedAlert.prototype.hasSignature = function () {
  return jspb.Message.getField(this, 2) != null
}

/**
 * optional string chainId = 3;
 * @return {string}
 */
proto.network.forta.SignedAlert.prototype.getChainid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.SignedAlert} returns this
 */
proto.network.forta.SignedAlert.prototype.setChainid = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string blockNumber = 4;
 * @return {string}
 */
proto.network.forta.SignedAlert.prototype.getBlocknumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.SignedAlert} returns this
 */
proto.network.forta.SignedAlert.prototype.setBlocknumber = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string publishedWithTx = 5;
 * @return {string}
 */
proto.network.forta.SignedAlert.prototype.getPublishedwithtx = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.SignedAlert} returns this
 */
proto.network.forta.SignedAlert.prototype.setPublishedwithtx = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.Label.repeatedFields_ = [8]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.Label.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.Label.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.Label} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.Label.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        entitytype: jspb.Message.getFieldWithDefault(msg, 1, 0),
        entity: jspb.Message.getFieldWithDefault(msg, 2, ''),
        confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
        remove: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
        label: jspb.Message.getFieldWithDefault(msg, 7, ''),
        metadataList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
        uniquekey: jspb.Message.getFieldWithDefault(msg, 9, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.Label}
 */
proto.network.forta.Label.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.Label()
  return proto.network.forta.Label.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.Label} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.Label}
 */
proto.network.forta.Label.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.network.forta.Label.EntityType} */ (reader.readEnum())
        msg.setEntitytype(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setEntity(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setConfidence(value)
        break
      case 6:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setRemove(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setLabel(value)
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.addMetadata(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setUniquekey(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.Label.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.Label.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.Label} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.Label.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getEntitytype()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getEntity()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getConfidence()
  if (f !== 0.0) {
    writer.writeFloat(4, f)
  }
  f = message.getRemove()
  if (f) {
    writer.writeBool(6, f)
  }
  f = message.getLabel()
  if (f.length > 0) {
    writer.writeString(7, f)
  }
  f = message.getMetadataList()
  if (f.length > 0) {
    writer.writeRepeatedString(8, f)
  }
  f = message.getUniquekey()
  if (f.length > 0) {
    writer.writeString(9, f)
  }
}

/**
 * @enum {number}
 */
proto.network.forta.Label.EntityType = {
  UNKNOWN_ENTITY_TYPE: 0,
  ADDRESS: 1,
  TRANSACTION: 2,
  BLOCK: 3,
  URL: 4,
}

/**
 * optional EntityType entityType = 1;
 * @return {!proto.network.forta.Label.EntityType}
 */
proto.network.forta.Label.prototype.getEntitytype = function () {
  return /** @type {!proto.network.forta.Label.EntityType} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {!proto.network.forta.Label.EntityType} value
 * @return {!proto.network.forta.Label} returns this
 */
proto.network.forta.Label.prototype.setEntitytype = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * optional string entity = 2;
 * @return {string}
 */
proto.network.forta.Label.prototype.getEntity = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Label} returns this
 */
proto.network.forta.Label.prototype.setEntity = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional float confidence = 4;
 * @return {number}
 */
proto.network.forta.Label.prototype.getConfidence = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.Label} returns this
 */
proto.network.forta.Label.prototype.setConfidence = function (value) {
  return jspb.Message.setProto3FloatField(this, 4, value)
}

/**
 * optional bool remove = 6;
 * @return {boolean}
 */
proto.network.forta.Label.prototype.getRemove = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false))
}

/**
 * @param {boolean} value
 * @return {!proto.network.forta.Label} returns this
 */
proto.network.forta.Label.prototype.setRemove = function (value) {
  return jspb.Message.setProto3BooleanField(this, 6, value)
}

/**
 * optional string label = 7;
 * @return {string}
 */
proto.network.forta.Label.prototype.getLabel = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Label} returns this
 */
proto.network.forta.Label.prototype.setLabel = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * repeated string metadata = 8;
 * @return {!Array<string>}
 */
proto.network.forta.Label.prototype.getMetadataList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.Label} returns this
 */
proto.network.forta.Label.prototype.setMetadataList = function (value) {
  return jspb.Message.setField(this, 8, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Label} returns this
 */
proto.network.forta.Label.prototype.addMetadata = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.Label} returns this
 */
proto.network.forta.Label.prototype.clearMetadataList = function () {
  return this.setMetadataList([])
}

/**
 * optional string uniqueKey = 9;
 * @return {string}
 */
proto.network.forta.Label.prototype.getUniquekey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Label} returns this
 */
proto.network.forta.Label.prototype.setUniquekey = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.Source.repeatedFields_ = [1, 2, 3, 4, 5, 6]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.Source.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.Source.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.Source} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.Source.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        transactionsList: jspb.Message.toObjectList(
          msg.getTransactionsList(),
          proto.network.forta.Source.TransactionSource.toObject,
          includeInstance,
        ),
        blocksList: jspb.Message.toObjectList(
          msg.getBlocksList(),
          proto.network.forta.Source.BlockSource.toObject,
          includeInstance,
        ),
        urlsList: jspb.Message.toObjectList(
          msg.getUrlsList(),
          proto.network.forta.Source.URLSource.toObject,
          includeInstance,
        ),
        chainsList: jspb.Message.toObjectList(
          msg.getChainsList(),
          proto.network.forta.Source.ChainSource.toObject,
          includeInstance,
        ),
        alertsList: jspb.Message.toObjectList(
          msg.getAlertsList(),
          proto.network.forta.Source.AlertSource.toObject,
          includeInstance,
        ),
        customsourcesList: jspb.Message.toObjectList(
          msg.getCustomsourcesList(),
          proto.network.forta.Source.CustomSource.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.Source}
 */
proto.network.forta.Source.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.Source()
  return proto.network.forta.Source.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.Source} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.Source}
 */
proto.network.forta.Source.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.network.forta.Source.TransactionSource()
        reader.readMessage(value, proto.network.forta.Source.TransactionSource.deserializeBinaryFromReader)
        msg.addTransactions(value)
        break
      case 2:
        var value = new proto.network.forta.Source.BlockSource()
        reader.readMessage(value, proto.network.forta.Source.BlockSource.deserializeBinaryFromReader)
        msg.addBlocks(value)
        break
      case 3:
        var value = new proto.network.forta.Source.URLSource()
        reader.readMessage(value, proto.network.forta.Source.URLSource.deserializeBinaryFromReader)
        msg.addUrls(value)
        break
      case 4:
        var value = new proto.network.forta.Source.ChainSource()
        reader.readMessage(value, proto.network.forta.Source.ChainSource.deserializeBinaryFromReader)
        msg.addChains(value)
        break
      case 5:
        var value = new proto.network.forta.Source.AlertSource()
        reader.readMessage(value, proto.network.forta.Source.AlertSource.deserializeBinaryFromReader)
        msg.addAlerts(value)
        break
      case 6:
        var value = new proto.network.forta.Source.CustomSource()
        reader.readMessage(value, proto.network.forta.Source.CustomSource.deserializeBinaryFromReader)
        msg.addCustomsources(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.Source.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.Source.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.Source} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.Source.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTransactionsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.network.forta.Source.TransactionSource.serializeBinaryToWriter)
  }
  f = message.getBlocksList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.network.forta.Source.BlockSource.serializeBinaryToWriter)
  }
  f = message.getUrlsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, proto.network.forta.Source.URLSource.serializeBinaryToWriter)
  }
  f = message.getChainsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, proto.network.forta.Source.ChainSource.serializeBinaryToWriter)
  }
  f = message.getAlertsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(5, f, proto.network.forta.Source.AlertSource.serializeBinaryToWriter)
  }
  f = message.getCustomsourcesList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(6, f, proto.network.forta.Source.CustomSource.serializeBinaryToWriter)
  }
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.Source.TransactionSource.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.Source.TransactionSource.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.Source.TransactionSource} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.Source.TransactionSource.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chainid: jspb.Message.getFieldWithDefault(msg, 1, 0),
        hash: jspb.Message.getFieldWithDefault(msg, 2, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.Source.TransactionSource}
 */
proto.network.forta.Source.TransactionSource.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.Source.TransactionSource()
  return proto.network.forta.Source.TransactionSource.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.Source.TransactionSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.Source.TransactionSource}
 */
proto.network.forta.Source.TransactionSource.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setChainid(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.Source.TransactionSource.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.Source.TransactionSource.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.Source.TransactionSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.Source.TransactionSource.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getChainid()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
}

/**
 * optional uint64 chainId = 1;
 * @return {number}
 */
proto.network.forta.Source.TransactionSource.prototype.getChainid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.Source.TransactionSource} returns this
 */
proto.network.forta.Source.TransactionSource.prototype.setChainid = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional string hash = 2;
 * @return {string}
 */
proto.network.forta.Source.TransactionSource.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Source.TransactionSource} returns this
 */
proto.network.forta.Source.TransactionSource.prototype.setHash = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.Source.BlockSource.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.Source.BlockSource.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.Source.BlockSource} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.Source.BlockSource.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chainid: jspb.Message.getFieldWithDefault(msg, 1, 0),
        hash: jspb.Message.getFieldWithDefault(msg, 2, ''),
        number: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.Source.BlockSource}
 */
proto.network.forta.Source.BlockSource.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.Source.BlockSource()
  return proto.network.forta.Source.BlockSource.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.Source.BlockSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.Source.BlockSource}
 */
proto.network.forta.Source.BlockSource.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setChainid(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setNumber(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.Source.BlockSource.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.Source.BlockSource.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.Source.BlockSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.Source.BlockSource.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getChainid()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getNumber()
  if (f !== 0) {
    writer.writeUint64(3, f)
  }
}

/**
 * optional uint64 chainId = 1;
 * @return {number}
 */
proto.network.forta.Source.BlockSource.prototype.getChainid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.Source.BlockSource} returns this
 */
proto.network.forta.Source.BlockSource.prototype.setChainid = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional string hash = 2;
 * @return {string}
 */
proto.network.forta.Source.BlockSource.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Source.BlockSource} returns this
 */
proto.network.forta.Source.BlockSource.prototype.setHash = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional uint64 number = 3;
 * @return {number}
 */
proto.network.forta.Source.BlockSource.prototype.getNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.Source.BlockSource} returns this
 */
proto.network.forta.Source.BlockSource.prototype.setNumber = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.Source.URLSource.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.Source.URLSource.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.Source.URLSource} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.Source.URLSource.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        url: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.Source.URLSource}
 */
proto.network.forta.Source.URLSource.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.Source.URLSource()
  return proto.network.forta.Source.URLSource.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.Source.URLSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.Source.URLSource}
 */
proto.network.forta.Source.URLSource.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setUrl(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.Source.URLSource.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.Source.URLSource.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.Source.URLSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.Source.URLSource.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getUrl()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string url = 1;
 * @return {string}
 */
proto.network.forta.Source.URLSource.prototype.getUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Source.URLSource} returns this
 */
proto.network.forta.Source.URLSource.prototype.setUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.Source.ChainSource.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.Source.ChainSource.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.Source.ChainSource} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.Source.ChainSource.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chainid: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.Source.ChainSource}
 */
proto.network.forta.Source.ChainSource.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.Source.ChainSource()
  return proto.network.forta.Source.ChainSource.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.Source.ChainSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.Source.ChainSource}
 */
proto.network.forta.Source.ChainSource.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setChainid(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.Source.ChainSource.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.Source.ChainSource.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.Source.ChainSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.Source.ChainSource.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getChainid()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
}

/**
 * optional uint64 chainId = 1;
 * @return {number}
 */
proto.network.forta.Source.ChainSource.prototype.getChainid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.Source.ChainSource} returns this
 */
proto.network.forta.Source.ChainSource.prototype.setChainid = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.Source.AlertSource.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.Source.AlertSource.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.Source.AlertSource} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.Source.AlertSource.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.Source.AlertSource}
 */
proto.network.forta.Source.AlertSource.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.Source.AlertSource()
  return proto.network.forta.Source.AlertSource.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.Source.AlertSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.Source.AlertSource}
 */
proto.network.forta.Source.AlertSource.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.Source.AlertSource.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.Source.AlertSource.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.Source.AlertSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.Source.AlertSource.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getId()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.network.forta.Source.AlertSource.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Source.AlertSource} returns this
 */
proto.network.forta.Source.AlertSource.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.Source.CustomSource.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.Source.CustomSource.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.Source.CustomSource} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.Source.CustomSource.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ''),
        value: jspb.Message.getFieldWithDefault(msg, 2, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.Source.CustomSource}
 */
proto.network.forta.Source.CustomSource.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.Source.CustomSource()
  return proto.network.forta.Source.CustomSource.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.Source.CustomSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.Source.CustomSource}
 */
proto.network.forta.Source.CustomSource.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setName(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setValue(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.Source.CustomSource.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.Source.CustomSource.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.Source.CustomSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.Source.CustomSource.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getName()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getValue()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
}

/**
 * optional string name = 1;
 * @return {string}
 */
proto.network.forta.Source.CustomSource.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Source.CustomSource} returns this
 */
proto.network.forta.Source.CustomSource.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string value = 2;
 * @return {string}
 */
proto.network.forta.Source.CustomSource.prototype.getValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Source.CustomSource} returns this
 */
proto.network.forta.Source.CustomSource.prototype.setValue = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * repeated TransactionSource transactions = 1;
 * @return {!Array<!proto.network.forta.Source.TransactionSource>}
 */
proto.network.forta.Source.prototype.getTransactionsList = function () {
  return /** @type{!Array<!proto.network.forta.Source.TransactionSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.Source.TransactionSource, 1)
  )
}

/**
 * @param {!Array<!proto.network.forta.Source.TransactionSource>} value
 * @return {!proto.network.forta.Source} returns this
 */
proto.network.forta.Source.prototype.setTransactionsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.network.forta.Source.TransactionSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Source.TransactionSource}
 */
proto.network.forta.Source.prototype.addTransactions = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.network.forta.Source.TransactionSource,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.Source} returns this
 */
proto.network.forta.Source.prototype.clearTransactionsList = function () {
  return this.setTransactionsList([])
}

/**
 * repeated BlockSource blocks = 2;
 * @return {!Array<!proto.network.forta.Source.BlockSource>}
 */
proto.network.forta.Source.prototype.getBlocksList = function () {
  return /** @type{!Array<!proto.network.forta.Source.BlockSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.Source.BlockSource, 2)
  )
}

/**
 * @param {!Array<!proto.network.forta.Source.BlockSource>} value
 * @return {!proto.network.forta.Source} returns this
 */
proto.network.forta.Source.prototype.setBlocksList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.network.forta.Source.BlockSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Source.BlockSource}
 */
proto.network.forta.Source.prototype.addBlocks = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.network.forta.Source.BlockSource, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.Source} returns this
 */
proto.network.forta.Source.prototype.clearBlocksList = function () {
  return this.setBlocksList([])
}

/**
 * repeated URLSource urls = 3;
 * @return {!Array<!proto.network.forta.Source.URLSource>}
 */
proto.network.forta.Source.prototype.getUrlsList = function () {
  return /** @type{!Array<!proto.network.forta.Source.URLSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.Source.URLSource, 3)
  )
}

/**
 * @param {!Array<!proto.network.forta.Source.URLSource>} value
 * @return {!proto.network.forta.Source} returns this
 */
proto.network.forta.Source.prototype.setUrlsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value)
}

/**
 * @param {!proto.network.forta.Source.URLSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Source.URLSource}
 */
proto.network.forta.Source.prototype.addUrls = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.network.forta.Source.URLSource, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.Source} returns this
 */
proto.network.forta.Source.prototype.clearUrlsList = function () {
  return this.setUrlsList([])
}

/**
 * repeated ChainSource chains = 4;
 * @return {!Array<!proto.network.forta.Source.ChainSource>}
 */
proto.network.forta.Source.prototype.getChainsList = function () {
  return /** @type{!Array<!proto.network.forta.Source.ChainSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.Source.ChainSource, 4)
  )
}

/**
 * @param {!Array<!proto.network.forta.Source.ChainSource>} value
 * @return {!proto.network.forta.Source} returns this
 */
proto.network.forta.Source.prototype.setChainsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value)
}

/**
 * @param {!proto.network.forta.Source.ChainSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Source.ChainSource}
 */
proto.network.forta.Source.prototype.addChains = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.network.forta.Source.ChainSource, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.Source} returns this
 */
proto.network.forta.Source.prototype.clearChainsList = function () {
  return this.setChainsList([])
}

/**
 * repeated AlertSource alerts = 5;
 * @return {!Array<!proto.network.forta.Source.AlertSource>}
 */
proto.network.forta.Source.prototype.getAlertsList = function () {
  return /** @type{!Array<!proto.network.forta.Source.AlertSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.Source.AlertSource, 5)
  )
}

/**
 * @param {!Array<!proto.network.forta.Source.AlertSource>} value
 * @return {!proto.network.forta.Source} returns this
 */
proto.network.forta.Source.prototype.setAlertsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value)
}

/**
 * @param {!proto.network.forta.Source.AlertSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Source.AlertSource}
 */
proto.network.forta.Source.prototype.addAlerts = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.network.forta.Source.AlertSource, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.Source} returns this
 */
proto.network.forta.Source.prototype.clearAlertsList = function () {
  return this.setAlertsList([])
}

/**
 * repeated CustomSource customSources = 6;
 * @return {!Array<!proto.network.forta.Source.CustomSource>}
 */
proto.network.forta.Source.prototype.getCustomsourcesList = function () {
  return /** @type{!Array<!proto.network.forta.Source.CustomSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.Source.CustomSource, 6)
  )
}

/**
 * @param {!Array<!proto.network.forta.Source.CustomSource>} value
 * @return {!proto.network.forta.Source} returns this
 */
proto.network.forta.Source.prototype.setCustomsourcesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value)
}

/**
 * @param {!proto.network.forta.Source.CustomSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Source.CustomSource}
 */
proto.network.forta.Source.prototype.addCustomsources = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.network.forta.Source.CustomSource, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.Source} returns this
 */
proto.network.forta.Source.prototype.clearCustomsourcesList = function () {
  return this.setCustomsourcesList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.Finding.repeatedFields_ = [10, 12, 13]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.Finding.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.Finding.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.Finding} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.Finding.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        protocol: jspb.Message.getFieldWithDefault(msg, 1, ''),
        severity: jspb.Message.getFieldWithDefault(msg, 2, 0),
        metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
        type: jspb.Message.getFieldWithDefault(msg, 4, 0),
        alertid: jspb.Message.getFieldWithDefault(msg, 5, ''),
        name: jspb.Message.getFieldWithDefault(msg, 6, ''),
        description: jspb.Message.getFieldWithDefault(msg, 7, ''),
        pb_private: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
        addressesList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
        indicatorsMap: (f = msg.getIndicatorsMap()) ? f.toObject(includeInstance, undefined) : [],
        labelsList: jspb.Message.toObjectList(msg.getLabelsList(), proto.network.forta.Label.toObject, includeInstance),
        relatedalertsList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
        uniquekey: jspb.Message.getFieldWithDefault(msg, 14, ''),
        source: (f = msg.getSource()) && proto.network.forta.Source.toObject(includeInstance, f),
        timestamp: jspb.Message.getFieldWithDefault(msg, 16, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.Finding}
 */
proto.network.forta.Finding.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.Finding()
  return proto.network.forta.Finding.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.Finding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.Finding}
 */
proto.network.forta.Finding.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setProtocol(value)
        break
      case 2:
        var value = /** @type {!proto.network.forta.Finding.Severity} */ (reader.readEnum())
        msg.setSeverity(value)
        break
      case 3:
        var value = msg.getMetadataMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            '',
          )
        })
        break
      case 4:
        var value = /** @type {!proto.network.forta.Finding.FindingType} */ (reader.readEnum())
        msg.setType(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setAlertid(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setName(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setDescription(value)
        break
      case 9:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setPrivate(value)
        break
      case 10:
        var value = /** @type {string} */ (reader.readString())
        msg.addAddresses(value)
        break
      case 11:
        var value = msg.getIndicatorsMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readDouble,
            null,
            '',
            0.0,
          )
        })
        break
      case 12:
        var value = new proto.network.forta.Label()
        reader.readMessage(value, proto.network.forta.Label.deserializeBinaryFromReader)
        msg.addLabels(value)
        break
      case 13:
        var value = /** @type {string} */ (reader.readString())
        msg.addRelatedalerts(value)
        break
      case 14:
        var value = /** @type {string} */ (reader.readString())
        msg.setUniquekey(value)
        break
      case 15:
        var value = new proto.network.forta.Source()
        reader.readMessage(value, proto.network.forta.Source.deserializeBinaryFromReader)
        msg.setSource(value)
        break
      case 16:
        var value = /** @type {string} */ (reader.readString())
        msg.setTimestamp(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.Finding.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.Finding.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.Finding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.Finding.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getProtocol()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getSeverity()
  if (f !== 0.0) {
    writer.writeEnum(2, f)
  }
  f = message.getMetadataMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString)
  }
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(4, f)
  }
  f = message.getAlertid()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getName()
  if (f.length > 0) {
    writer.writeString(6, f)
  }
  f = message.getDescription()
  if (f.length > 0) {
    writer.writeString(7, f)
  }
  f = message.getPrivate()
  if (f) {
    writer.writeBool(9, f)
  }
  f = message.getAddressesList()
  if (f.length > 0) {
    writer.writeRepeatedString(10, f)
  }
  f = message.getIndicatorsMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeDouble)
  }
  f = message.getLabelsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(12, f, proto.network.forta.Label.serializeBinaryToWriter)
  }
  f = message.getRelatedalertsList()
  if (f.length > 0) {
    writer.writeRepeatedString(13, f)
  }
  f = message.getUniquekey()
  if (f.length > 0) {
    writer.writeString(14, f)
  }
  f = message.getSource()
  if (f != null) {
    writer.writeMessage(15, f, proto.network.forta.Source.serializeBinaryToWriter)
  }
  f = message.getTimestamp()
  if (f.length > 0) {
    writer.writeString(16, f)
  }
}

/**
 * @enum {number}
 */
proto.network.forta.Finding.Severity = {
  UNKNOWN: 0,
  INFO: 1,
  LOW: 2,
  MEDIUM: 3,
  HIGH: 4,
  CRITICAL: 5,
}

/**
 * @enum {number}
 */
proto.network.forta.Finding.FindingType = {
  UNKNOWN_TYPE: 0,
  EXPLOIT: 1,
  SUSPICIOUS: 2,
  DEGRADED: 3,
  INFORMATION: 4,
  SCAM: 5,
}

/**
 * optional string protocol = 1;
 * @return {string}
 */
proto.network.forta.Finding.prototype.getProtocol = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setProtocol = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional Severity severity = 2;
 * @return {!proto.network.forta.Finding.Severity}
 */
proto.network.forta.Finding.prototype.getSeverity = function () {
  return /** @type {!proto.network.forta.Finding.Severity} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {!proto.network.forta.Finding.Severity} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setSeverity = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value)
}

/**
 * map<string, string> metadata = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.network.forta.Finding.prototype.getMetadataMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 3, opt_noLazyCreate, null))
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.clearMetadataMap = function () {
  this.getMetadataMap().clear()
  return this
}

/**
 * optional FindingType type = 4;
 * @return {!proto.network.forta.Finding.FindingType}
 */
proto.network.forta.Finding.prototype.getType = function () {
  return /** @type {!proto.network.forta.Finding.FindingType} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {!proto.network.forta.Finding.FindingType} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 4, value)
}

/**
 * optional string alertId = 5;
 * @return {string}
 */
proto.network.forta.Finding.prototype.getAlertid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setAlertid = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string name = 6;
 * @return {string}
 */
proto.network.forta.Finding.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * optional string description = 7;
 * @return {string}
 */
proto.network.forta.Finding.prototype.getDescription = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setDescription = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * optional bool private = 9;
 * @return {boolean}
 */
proto.network.forta.Finding.prototype.getPrivate = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false))
}

/**
 * @param {boolean} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setPrivate = function (value) {
  return jspb.Message.setProto3BooleanField(this, 9, value)
}

/**
 * repeated string addresses = 10;
 * @return {!Array<string>}
 */
proto.network.forta.Finding.prototype.getAddressesList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setAddressesList = function (value) {
  return jspb.Message.setField(this, 10, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.addAddresses = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.clearAddressesList = function () {
  return this.setAddressesList([])
}

/**
 * map<string, double> indicators = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.network.forta.Finding.prototype.getIndicatorsMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (jspb.Message.getMapField(this, 11, opt_noLazyCreate, null))
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.clearIndicatorsMap = function () {
  this.getIndicatorsMap().clear()
  return this
}

/**
 * repeated Label labels = 12;
 * @return {!Array<!proto.network.forta.Label>}
 */
proto.network.forta.Finding.prototype.getLabelsList = function () {
  return /** @type{!Array<!proto.network.forta.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.Label, 12)
  )
}

/**
 * @param {!Array<!proto.network.forta.Label>} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setLabelsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value)
}

/**
 * @param {!proto.network.forta.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Label}
 */
proto.network.forta.Finding.prototype.addLabels = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.network.forta.Label, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.clearLabelsList = function () {
  return this.setLabelsList([])
}

/**
 * repeated string relatedAlerts = 13;
 * @return {!Array<string>}
 */
proto.network.forta.Finding.prototype.getRelatedalertsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setRelatedalertsList = function (value) {
  return jspb.Message.setField(this, 13, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.addRelatedalerts = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.clearRelatedalertsList = function () {
  return this.setRelatedalertsList([])
}

/**
 * optional string uniqueKey = 14;
 * @return {string}
 */
proto.network.forta.Finding.prototype.getUniquekey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setUniquekey = function (value) {
  return jspb.Message.setProto3StringField(this, 14, value)
}

/**
 * optional Source source = 15;
 * @return {?proto.network.forta.Source}
 */
proto.network.forta.Finding.prototype.getSource = function () {
  return /** @type{?proto.network.forta.Source} */ (jspb.Message.getWrapperField(this, proto.network.forta.Source, 15))
}

/**
 * @param {?proto.network.forta.Source|undefined} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setSource = function (value) {
  return jspb.Message.setWrapperField(this, 15, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.clearSource = function () {
  return this.setSource(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.Finding.prototype.hasSource = function () {
  return jspb.Message.getField(this, 15) != null
}

/**
 * optional string timestamp = 16;
 * @return {string}
 */
proto.network.forta.Finding.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Finding} returns this
 */
proto.network.forta.Finding.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 16, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.APIAlert.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.APIAlert.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.APIAlert} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.APIAlert.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        type: jspb.Message.getFieldWithDefault(msg, 2, 0),
        finding: (f = msg.getFinding()) && proto.network.forta.Finding.toObject(includeInstance, f),
        agent: (f = msg.getAgent()) && proto.network.forta.APIAlert.APIAlertAgent.toObject(includeInstance, f),
        timestamp: jspb.Message.getFieldWithDefault(msg, 5, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.APIAlert}
 */
proto.network.forta.APIAlert.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.APIAlert()
  return proto.network.forta.APIAlert.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.APIAlert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.APIAlert}
 */
proto.network.forta.APIAlert.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setId(value)
        break
      case 2:
        var value = /** @type {!proto.network.forta.AlertType} */ (reader.readEnum())
        msg.setType(value)
        break
      case 3:
        var value = new proto.network.forta.Finding()
        reader.readMessage(value, proto.network.forta.Finding.deserializeBinaryFromReader)
        msg.setFinding(value)
        break
      case 4:
        var value = new proto.network.forta.APIAlert.APIAlertAgent()
        reader.readMessage(value, proto.network.forta.APIAlert.APIAlertAgent.deserializeBinaryFromReader)
        msg.setAgent(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setTimestamp(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.APIAlert.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.APIAlert.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.APIAlert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.APIAlert.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getId()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(2, f)
  }
  f = message.getFinding()
  if (f != null) {
    writer.writeMessage(3, f, proto.network.forta.Finding.serializeBinaryToWriter)
  }
  f = message.getAgent()
  if (f != null) {
    writer.writeMessage(4, f, proto.network.forta.APIAlert.APIAlertAgent.serializeBinaryToWriter)
  }
  f = message.getTimestamp()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.APIAlert.APIAlertAgent.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.APIAlert.APIAlertAgent.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.APIAlert.APIAlertAgent} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.APIAlert.APIAlertAgent.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.APIAlert.APIAlertAgent}
 */
proto.network.forta.APIAlert.APIAlertAgent.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.APIAlert.APIAlertAgent()
  return proto.network.forta.APIAlert.APIAlertAgent.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.APIAlert.APIAlertAgent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.APIAlert.APIAlertAgent}
 */
proto.network.forta.APIAlert.APIAlertAgent.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.APIAlert.APIAlertAgent.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.APIAlert.APIAlertAgent.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.APIAlert.APIAlertAgent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.APIAlert.APIAlertAgent.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getId()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.network.forta.APIAlert.APIAlertAgent.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.APIAlert.APIAlertAgent} returns this
 */
proto.network.forta.APIAlert.APIAlertAgent.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.network.forta.APIAlert.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.APIAlert} returns this
 */
proto.network.forta.APIAlert.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional AlertType type = 2;
 * @return {!proto.network.forta.AlertType}
 */
proto.network.forta.APIAlert.prototype.getType = function () {
  return /** @type {!proto.network.forta.AlertType} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {!proto.network.forta.AlertType} value
 * @return {!proto.network.forta.APIAlert} returns this
 */
proto.network.forta.APIAlert.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value)
}

/**
 * optional Finding finding = 3;
 * @return {?proto.network.forta.Finding}
 */
proto.network.forta.APIAlert.prototype.getFinding = function () {
  return /** @type{?proto.network.forta.Finding} */ (jspb.Message.getWrapperField(this, proto.network.forta.Finding, 3))
}

/**
 * @param {?proto.network.forta.Finding|undefined} value
 * @return {!proto.network.forta.APIAlert} returns this
 */
proto.network.forta.APIAlert.prototype.setFinding = function (value) {
  return jspb.Message.setWrapperField(this, 3, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.APIAlert} returns this
 */
proto.network.forta.APIAlert.prototype.clearFinding = function () {
  return this.setFinding(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.APIAlert.prototype.hasFinding = function () {
  return jspb.Message.getField(this, 3) != null
}

/**
 * optional APIAlertAgent agent = 4;
 * @return {?proto.network.forta.APIAlert.APIAlertAgent}
 */
proto.network.forta.APIAlert.prototype.getAgent = function () {
  return /** @type{?proto.network.forta.APIAlert.APIAlertAgent} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.APIAlert.APIAlertAgent, 4)
  )
}

/**
 * @param {?proto.network.forta.APIAlert.APIAlertAgent|undefined} value
 * @return {!proto.network.forta.APIAlert} returns this
 */
proto.network.forta.APIAlert.prototype.setAgent = function (value) {
  return jspb.Message.setWrapperField(this, 4, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.APIAlert} returns this
 */
proto.network.forta.APIAlert.prototype.clearAgent = function () {
  return this.setAgent(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.APIAlert.prototype.hasAgent = function () {
  return jspb.Message.getField(this, 4) != null
}

/**
 * optional string timestamp = 5;
 * @return {string}
 */
proto.network.forta.APIAlert.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.APIAlert} returns this
 */
proto.network.forta.APIAlert.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * @enum {number}
 */
proto.network.forta.AlertType = {
  UNKNOWN_ALERT_TYPE: 0,
  TRANSACTION: 1,
  BLOCK: 2,
  PRIVATE: 3,
  COMBINATION: 4,
  API: 5,
}

goog.object.extend(exports, proto.network.forta)
