// source: agent.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf')
var goog = jspb
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this
  }.call(null) ||
  Function('return this')()

var alert_pb = require('./alert_pb.js')
goog.object.extend(proto, alert_pb)
goog.exportSymbol('proto.network.forta.AlertConfig', null, global)
goog.exportSymbol('proto.network.forta.AlertEvent', null, global)
goog.exportSymbol('proto.network.forta.AlertEvent.Alert', null, global)
goog.exportSymbol('proto.network.forta.AlertEvent.Alert.Block', null, global)
goog.exportSymbol('proto.network.forta.AlertEvent.Alert.Bot', null, global)
goog.exportSymbol('proto.network.forta.AlertEvent.Alert.Contract', null, global)
goog.exportSymbol('proto.network.forta.AlertEvent.Alert.Label', null, global)
goog.exportSymbol('proto.network.forta.AlertEvent.Alert.Project', null, global)
goog.exportSymbol('proto.network.forta.AlertEvent.Alert.Source', null, global)
goog.exportSymbol('proto.network.forta.AlertEvent.Alert.SourceAlertEvent', null, global)
goog.exportSymbol('proto.network.forta.BlockEvent', null, global)
goog.exportSymbol('proto.network.forta.BlockEvent.EthBlock', null, global)
goog.exportSymbol('proto.network.forta.BlockEvent.EventType', null, global)
goog.exportSymbol('proto.network.forta.BlockEvent.Network', null, global)
goog.exportSymbol('proto.network.forta.CombinerBotSubscription', null, global)
goog.exportSymbol('proto.network.forta.Error', null, global)
goog.exportSymbol('proto.network.forta.EvaluateAlertRequest', null, global)
goog.exportSymbol('proto.network.forta.EvaluateAlertResponse', null, global)
goog.exportSymbol('proto.network.forta.EvaluateBlockRequest', null, global)
goog.exportSymbol('proto.network.forta.EvaluateBlockResponse', null, global)
goog.exportSymbol('proto.network.forta.EvaluateTxRequest', null, global)
goog.exportSymbol('proto.network.forta.EvaluateTxResponse', null, global)
goog.exportSymbol('proto.network.forta.HealthCheckRequest', null, global)
goog.exportSymbol('proto.network.forta.HealthCheckResponse', null, global)
goog.exportSymbol('proto.network.forta.HealthCheckResponse.ResponseStatus', null, global)
goog.exportSymbol('proto.network.forta.InitializeRequest', null, global)
goog.exportSymbol('proto.network.forta.InitializeResponse', null, global)
goog.exportSymbol('proto.network.forta.ResponseStatus', null, global)
goog.exportSymbol('proto.network.forta.TransactionEvent', null, global)
goog.exportSymbol('proto.network.forta.TransactionEvent.EthBlock', null, global)
goog.exportSymbol('proto.network.forta.TransactionEvent.EthReceipt', null, global)
goog.exportSymbol('proto.network.forta.TransactionEvent.EthTransaction', null, global)
goog.exportSymbol('proto.network.forta.TransactionEvent.EventType', null, global)
goog.exportSymbol('proto.network.forta.TransactionEvent.Log', null, global)
goog.exportSymbol('proto.network.forta.TransactionEvent.Network', null, global)
goog.exportSymbol('proto.network.forta.TransactionEvent.Trace', null, global)
goog.exportSymbol('proto.network.forta.TransactionEvent.TraceAction', null, global)
goog.exportSymbol('proto.network.forta.TransactionEvent.TraceResult', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.Error = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.Error, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.Error.displayName = 'proto.network.forta.Error'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.HealthCheckRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.HealthCheckRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.HealthCheckRequest.displayName = 'proto.network.forta.HealthCheckRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.HealthCheckResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.HealthCheckResponse.repeatedFields_, null)
}
goog.inherits(proto.network.forta.HealthCheckResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.HealthCheckResponse.displayName = 'proto.network.forta.HealthCheckResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.InitializeRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.InitializeRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.InitializeRequest.displayName = 'proto.network.forta.InitializeRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.InitializeResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.InitializeResponse.repeatedFields_, null)
}
goog.inherits(proto.network.forta.InitializeResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.InitializeResponse.displayName = 'proto.network.forta.InitializeResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.AlertConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.AlertConfig.repeatedFields_, null)
}
goog.inherits(proto.network.forta.AlertConfig, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.AlertConfig.displayName = 'proto.network.forta.AlertConfig'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.CombinerBotSubscription = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.CombinerBotSubscription.repeatedFields_, null)
}
goog.inherits(proto.network.forta.CombinerBotSubscription, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.CombinerBotSubscription.displayName = 'proto.network.forta.CombinerBotSubscription'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.EvaluateTxRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.EvaluateTxRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.EvaluateTxRequest.displayName = 'proto.network.forta.EvaluateTxRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.EvaluateBlockRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.EvaluateBlockRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.EvaluateBlockRequest.displayName = 'proto.network.forta.EvaluateBlockRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.EvaluateAlertRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.EvaluateAlertRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.EvaluateAlertRequest.displayName = 'proto.network.forta.EvaluateAlertRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.EvaluateTxResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.EvaluateTxResponse.repeatedFields_, null)
}
goog.inherits(proto.network.forta.EvaluateTxResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.EvaluateTxResponse.displayName = 'proto.network.forta.EvaluateTxResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.EvaluateBlockResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.EvaluateBlockResponse.repeatedFields_, null)
}
goog.inherits(proto.network.forta.EvaluateBlockResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.EvaluateBlockResponse.displayName = 'proto.network.forta.EvaluateBlockResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.EvaluateAlertResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.EvaluateAlertResponse.repeatedFields_, null)
}
goog.inherits(proto.network.forta.EvaluateAlertResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.EvaluateAlertResponse.displayName = 'proto.network.forta.EvaluateAlertResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.BlockEvent = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.BlockEvent, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.BlockEvent.displayName = 'proto.network.forta.BlockEvent'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.BlockEvent.Network = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.BlockEvent.Network, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.BlockEvent.Network.displayName = 'proto.network.forta.BlockEvent.Network'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.BlockEvent.EthBlock = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.BlockEvent.EthBlock.repeatedFields_, null)
}
goog.inherits(proto.network.forta.BlockEvent.EthBlock, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.BlockEvent.EthBlock.displayName = 'proto.network.forta.BlockEvent.EthBlock'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.TransactionEvent = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.TransactionEvent.repeatedFields_, null)
}
goog.inherits(proto.network.forta.TransactionEvent, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.TransactionEvent.displayName = 'proto.network.forta.TransactionEvent'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.TransactionEvent.Network = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.TransactionEvent.Network, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.TransactionEvent.Network.displayName = 'proto.network.forta.TransactionEvent.Network'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.TransactionEvent.EthBlock = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.TransactionEvent.EthBlock, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.TransactionEvent.EthBlock.displayName = 'proto.network.forta.TransactionEvent.EthBlock'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.TransactionEvent.EthTransaction = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.TransactionEvent.EthTransaction, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.TransactionEvent.EthTransaction.displayName =
    'proto.network.forta.TransactionEvent.EthTransaction'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.TransactionEvent.Log = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.TransactionEvent.Log.repeatedFields_, null)
}
goog.inherits(proto.network.forta.TransactionEvent.Log, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.TransactionEvent.Log.displayName = 'proto.network.forta.TransactionEvent.Log'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.TransactionEvent.EthReceipt = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.TransactionEvent.EthReceipt.repeatedFields_, null)
}
goog.inherits(proto.network.forta.TransactionEvent.EthReceipt, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.TransactionEvent.EthReceipt.displayName = 'proto.network.forta.TransactionEvent.EthReceipt'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.TransactionEvent.TraceAction = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.TransactionEvent.TraceAction, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.TransactionEvent.TraceAction.displayName = 'proto.network.forta.TransactionEvent.TraceAction'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.TransactionEvent.TraceResult = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.TransactionEvent.TraceResult, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.TransactionEvent.TraceResult.displayName = 'proto.network.forta.TransactionEvent.TraceResult'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.TransactionEvent.Trace = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.TransactionEvent.Trace.repeatedFields_, null)
}
goog.inherits(proto.network.forta.TransactionEvent.Trace, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.TransactionEvent.Trace.displayName = 'proto.network.forta.TransactionEvent.Trace'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.AlertEvent = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.AlertEvent, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.AlertEvent.displayName = 'proto.network.forta.AlertEvent'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.AlertEvent.Alert = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.AlertEvent.Alert.repeatedFields_, null)
}
goog.inherits(proto.network.forta.AlertEvent.Alert, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.AlertEvent.Alert.displayName = 'proto.network.forta.AlertEvent.Alert'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.AlertEvent.Alert.Contract = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.AlertEvent.Alert.Contract, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.AlertEvent.Alert.Contract.displayName = 'proto.network.forta.AlertEvent.Alert.Contract'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.AlertEvent.Alert.Project = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.AlertEvent.Alert.Project, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.AlertEvent.Alert.Project.displayName = 'proto.network.forta.AlertEvent.Alert.Project'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.AlertEvent.Alert.Block = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.AlertEvent.Alert.Block, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.AlertEvent.Alert.Block.displayName = 'proto.network.forta.AlertEvent.Alert.Block'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.AlertEvent.Alert.Bot = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.AlertEvent.Alert.Bot.repeatedFields_, null)
}
goog.inherits(proto.network.forta.AlertEvent.Alert.Bot, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.AlertEvent.Alert.Bot.displayName = 'proto.network.forta.AlertEvent.Alert.Bot'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.AlertEvent.Alert.SourceAlertEvent, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.AlertEvent.Alert.SourceAlertEvent.displayName =
    'proto.network.forta.AlertEvent.Alert.SourceAlertEvent'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.AlertEvent.Alert.Source = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.network.forta.AlertEvent.Alert.Source, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.AlertEvent.Alert.Source.displayName = 'proto.network.forta.AlertEvent.Alert.Source'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.network.forta.AlertEvent.Alert.Label = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.network.forta.AlertEvent.Alert.Label.repeatedFields_, null)
}
goog.inherits(proto.network.forta.AlertEvent.Alert.Label, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.network.forta.AlertEvent.Alert.Label.displayName = 'proto.network.forta.AlertEvent.Alert.Label'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.Error.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.Error.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.Error} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.Error.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        message: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.Error}
 */
proto.network.forta.Error.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.Error()
  return proto.network.forta.Error.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.Error}
 */
proto.network.forta.Error.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessage(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.Error.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.Error.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.Error.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getMessage()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string message = 1;
 * @return {string}
 */
proto.network.forta.Error.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.Error} returns this
 */
proto.network.forta.Error.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.HealthCheckRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.HealthCheckRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.HealthCheckRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.HealthCheckRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {}

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.HealthCheckRequest}
 */
proto.network.forta.HealthCheckRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.HealthCheckRequest()
  return proto.network.forta.HealthCheckRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.HealthCheckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.HealthCheckRequest}
 */
proto.network.forta.HealthCheckRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.HealthCheckRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.HealthCheckRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.HealthCheckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.HealthCheckRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.HealthCheckResponse.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.HealthCheckResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.HealthCheckResponse.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.HealthCheckResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.HealthCheckResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, 0),
        errorsList: jspb.Message.toObjectList(msg.getErrorsList(), proto.network.forta.Error.toObject, includeInstance),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.HealthCheckResponse}
 */
proto.network.forta.HealthCheckResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.HealthCheckResponse()
  return proto.network.forta.HealthCheckResponse.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.HealthCheckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.HealthCheckResponse}
 */
proto.network.forta.HealthCheckResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.network.forta.HealthCheckResponse.ResponseStatus} */ (reader.readEnum())
        msg.setStatus(value)
        break
      case 2:
        var value = new proto.network.forta.Error()
        reader.readMessage(value, proto.network.forta.Error.deserializeBinaryFromReader)
        msg.addErrors(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.HealthCheckResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.HealthCheckResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.HealthCheckResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.HealthCheckResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getStatus()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getErrorsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.network.forta.Error.serializeBinaryToWriter)
  }
}

/**
 * @enum {number}
 */
proto.network.forta.HealthCheckResponse.ResponseStatus = {
  UNKNOWN: 0,
  ERROR: 1,
  SUCCESS: 2,
}

/**
 * optional ResponseStatus status = 1;
 * @return {!proto.network.forta.HealthCheckResponse.ResponseStatus}
 */
proto.network.forta.HealthCheckResponse.prototype.getStatus = function () {
  return /** @type {!proto.network.forta.HealthCheckResponse.ResponseStatus} */ (
    jspb.Message.getFieldWithDefault(this, 1, 0)
  )
}

/**
 * @param {!proto.network.forta.HealthCheckResponse.ResponseStatus} value
 * @return {!proto.network.forta.HealthCheckResponse} returns this
 */
proto.network.forta.HealthCheckResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * repeated Error errors = 2;
 * @return {!Array<!proto.network.forta.Error>}
 */
proto.network.forta.HealthCheckResponse.prototype.getErrorsList = function () {
  return /** @type{!Array<!proto.network.forta.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.Error, 2)
  )
}

/**
 * @param {!Array<!proto.network.forta.Error>} value
 * @return {!proto.network.forta.HealthCheckResponse} returns this
 */
proto.network.forta.HealthCheckResponse.prototype.setErrorsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.network.forta.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Error}
 */
proto.network.forta.HealthCheckResponse.prototype.addErrors = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.network.forta.Error, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.HealthCheckResponse} returns this
 */
proto.network.forta.HealthCheckResponse.prototype.clearErrorsList = function () {
  return this.setErrorsList([])
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.InitializeRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.InitializeRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.InitializeRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.InitializeRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        agentid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        proxyhost: jspb.Message.getFieldWithDefault(msg, 2, ''),
        shardid: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.InitializeRequest}
 */
proto.network.forta.InitializeRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.InitializeRequest()
  return proto.network.forta.InitializeRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.InitializeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.InitializeRequest}
 */
proto.network.forta.InitializeRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAgentid(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setProxyhost(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setShardid(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.InitializeRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.InitializeRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.InitializeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.InitializeRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAgentid()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getProxyhost()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getShardid()
  if (f !== 0) {
    writer.writeInt32(3, f)
  }
}

/**
 * optional string agentId = 1;
 * @return {string}
 */
proto.network.forta.InitializeRequest.prototype.getAgentid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.InitializeRequest} returns this
 */
proto.network.forta.InitializeRequest.prototype.setAgentid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string proxyHost = 2;
 * @return {string}
 */
proto.network.forta.InitializeRequest.prototype.getProxyhost = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.InitializeRequest} returns this
 */
proto.network.forta.InitializeRequest.prototype.setProxyhost = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional int32 shardId = 3;
 * @return {number}
 */
proto.network.forta.InitializeRequest.prototype.getShardid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.InitializeRequest} returns this
 */
proto.network.forta.InitializeRequest.prototype.setShardid = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.InitializeResponse.repeatedFields_ = [2, 3]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.InitializeResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.InitializeResponse.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.InitializeResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.InitializeResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, 0),
        errorsList: jspb.Message.toObjectList(msg.getErrorsList(), proto.network.forta.Error.toObject, includeInstance),
        addressesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
        alertconfig: (f = msg.getAlertconfig()) && proto.network.forta.AlertConfig.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.InitializeResponse}
 */
proto.network.forta.InitializeResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.InitializeResponse()
  return proto.network.forta.InitializeResponse.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.InitializeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.InitializeResponse}
 */
proto.network.forta.InitializeResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.network.forta.ResponseStatus} */ (reader.readEnum())
        msg.setStatus(value)
        break
      case 2:
        var value = new proto.network.forta.Error()
        reader.readMessage(value, proto.network.forta.Error.deserializeBinaryFromReader)
        msg.addErrors(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.addAddresses(value)
        break
      case 4:
        var value = new proto.network.forta.AlertConfig()
        reader.readMessage(value, proto.network.forta.AlertConfig.deserializeBinaryFromReader)
        msg.setAlertconfig(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.InitializeResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.InitializeResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.InitializeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.InitializeResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getStatus()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getErrorsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.network.forta.Error.serializeBinaryToWriter)
  }
  f = message.getAddressesList()
  if (f.length > 0) {
    writer.writeRepeatedString(3, f)
  }
  f = message.getAlertconfig()
  if (f != null) {
    writer.writeMessage(4, f, proto.network.forta.AlertConfig.serializeBinaryToWriter)
  }
}

/**
 * optional ResponseStatus status = 1;
 * @return {!proto.network.forta.ResponseStatus}
 */
proto.network.forta.InitializeResponse.prototype.getStatus = function () {
  return /** @type {!proto.network.forta.ResponseStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {!proto.network.forta.ResponseStatus} value
 * @return {!proto.network.forta.InitializeResponse} returns this
 */
proto.network.forta.InitializeResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * repeated Error errors = 2;
 * @return {!Array<!proto.network.forta.Error>}
 */
proto.network.forta.InitializeResponse.prototype.getErrorsList = function () {
  return /** @type{!Array<!proto.network.forta.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.Error, 2)
  )
}

/**
 * @param {!Array<!proto.network.forta.Error>} value
 * @return {!proto.network.forta.InitializeResponse} returns this
 */
proto.network.forta.InitializeResponse.prototype.setErrorsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.network.forta.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Error}
 */
proto.network.forta.InitializeResponse.prototype.addErrors = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.network.forta.Error, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.InitializeResponse} returns this
 */
proto.network.forta.InitializeResponse.prototype.clearErrorsList = function () {
  return this.setErrorsList([])
}

/**
 * repeated string addresses = 3;
 * @return {!Array<string>}
 */
proto.network.forta.InitializeResponse.prototype.getAddressesList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.InitializeResponse} returns this
 */
proto.network.forta.InitializeResponse.prototype.setAddressesList = function (value) {
  return jspb.Message.setField(this, 3, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.InitializeResponse} returns this
 */
proto.network.forta.InitializeResponse.prototype.addAddresses = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.InitializeResponse} returns this
 */
proto.network.forta.InitializeResponse.prototype.clearAddressesList = function () {
  return this.setAddressesList([])
}

/**
 * optional AlertConfig alertConfig = 4;
 * @return {?proto.network.forta.AlertConfig}
 */
proto.network.forta.InitializeResponse.prototype.getAlertconfig = function () {
  return /** @type{?proto.network.forta.AlertConfig} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.AlertConfig, 4)
  )
}

/**
 * @param {?proto.network.forta.AlertConfig|undefined} value
 * @return {!proto.network.forta.InitializeResponse} returns this
 */
proto.network.forta.InitializeResponse.prototype.setAlertconfig = function (value) {
  return jspb.Message.setWrapperField(this, 4, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.InitializeResponse} returns this
 */
proto.network.forta.InitializeResponse.prototype.clearAlertconfig = function () {
  return this.setAlertconfig(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.InitializeResponse.prototype.hasAlertconfig = function () {
  return jspb.Message.getField(this, 4) != null
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.AlertConfig.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.AlertConfig.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.AlertConfig.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.AlertConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.AlertConfig.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        subscriptionsList: jspb.Message.toObjectList(
          msg.getSubscriptionsList(),
          proto.network.forta.CombinerBotSubscription.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.AlertConfig}
 */
proto.network.forta.AlertConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.AlertConfig()
  return proto.network.forta.AlertConfig.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.AlertConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.AlertConfig}
 */
proto.network.forta.AlertConfig.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.network.forta.CombinerBotSubscription()
        reader.readMessage(value, proto.network.forta.CombinerBotSubscription.deserializeBinaryFromReader)
        msg.addSubscriptions(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.AlertConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.AlertConfig.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.AlertConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.AlertConfig.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getSubscriptionsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.network.forta.CombinerBotSubscription.serializeBinaryToWriter)
  }
}

/**
 * repeated CombinerBotSubscription subscriptions = 1;
 * @return {!Array<!proto.network.forta.CombinerBotSubscription>}
 */
proto.network.forta.AlertConfig.prototype.getSubscriptionsList = function () {
  return /** @type{!Array<!proto.network.forta.CombinerBotSubscription>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.CombinerBotSubscription, 1)
  )
}

/**
 * @param {!Array<!proto.network.forta.CombinerBotSubscription>} value
 * @return {!proto.network.forta.AlertConfig} returns this
 */
proto.network.forta.AlertConfig.prototype.setSubscriptionsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.network.forta.CombinerBotSubscription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.CombinerBotSubscription}
 */
proto.network.forta.AlertConfig.prototype.addSubscriptions = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.network.forta.CombinerBotSubscription,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.AlertConfig} returns this
 */
proto.network.forta.AlertConfig.prototype.clearSubscriptionsList = function () {
  return this.setSubscriptionsList([])
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.CombinerBotSubscription.repeatedFields_ = [3]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.CombinerBotSubscription.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.CombinerBotSubscription.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.CombinerBotSubscription} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.CombinerBotSubscription.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        botid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        alertid: jspb.Message.getFieldWithDefault(msg, 2, ''),
        alertidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
        chainid: jspb.Message.getFieldWithDefault(msg, 4, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.CombinerBotSubscription}
 */
proto.network.forta.CombinerBotSubscription.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.CombinerBotSubscription()
  return proto.network.forta.CombinerBotSubscription.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.CombinerBotSubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.CombinerBotSubscription}
 */
proto.network.forta.CombinerBotSubscription.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setBotid(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setAlertid(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.addAlertids(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setChainid(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.CombinerBotSubscription.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.CombinerBotSubscription.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.CombinerBotSubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.CombinerBotSubscription.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getBotid()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getAlertid()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getAlertidsList()
  if (f.length > 0) {
    writer.writeRepeatedString(3, f)
  }
  f = message.getChainid()
  if (f !== 0) {
    writer.writeUint64(4, f)
  }
}

/**
 * optional string botId = 1;
 * @return {string}
 */
proto.network.forta.CombinerBotSubscription.prototype.getBotid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.CombinerBotSubscription} returns this
 */
proto.network.forta.CombinerBotSubscription.prototype.setBotid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string alertId = 2;
 * @return {string}
 */
proto.network.forta.CombinerBotSubscription.prototype.getAlertid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.CombinerBotSubscription} returns this
 */
proto.network.forta.CombinerBotSubscription.prototype.setAlertid = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * repeated string alertIds = 3;
 * @return {!Array<string>}
 */
proto.network.forta.CombinerBotSubscription.prototype.getAlertidsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.CombinerBotSubscription} returns this
 */
proto.network.forta.CombinerBotSubscription.prototype.setAlertidsList = function (value) {
  return jspb.Message.setField(this, 3, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.CombinerBotSubscription} returns this
 */
proto.network.forta.CombinerBotSubscription.prototype.addAlertids = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.CombinerBotSubscription} returns this
 */
proto.network.forta.CombinerBotSubscription.prototype.clearAlertidsList = function () {
  return this.setAlertidsList([])
}

/**
 * optional uint64 chainId = 4;
 * @return {number}
 */
proto.network.forta.CombinerBotSubscription.prototype.getChainid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.CombinerBotSubscription} returns this
 */
proto.network.forta.CombinerBotSubscription.prototype.setChainid = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.EvaluateTxRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.EvaluateTxRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.EvaluateTxRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.EvaluateTxRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        requestid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        event: (f = msg.getEvent()) && proto.network.forta.TransactionEvent.toObject(includeInstance, f),
        shardid: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.EvaluateTxRequest}
 */
proto.network.forta.EvaluateTxRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.EvaluateTxRequest()
  return proto.network.forta.EvaluateTxRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.EvaluateTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.EvaluateTxRequest}
 */
proto.network.forta.EvaluateTxRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setRequestid(value)
        break
      case 2:
        var value = new proto.network.forta.TransactionEvent()
        reader.readMessage(value, proto.network.forta.TransactionEvent.deserializeBinaryFromReader)
        msg.setEvent(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setShardid(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.EvaluateTxRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.EvaluateTxRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.EvaluateTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.EvaluateTxRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getRequestid()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getEvent()
  if (f != null) {
    writer.writeMessage(2, f, proto.network.forta.TransactionEvent.serializeBinaryToWriter)
  }
  f = message.getShardid()
  if (f !== 0) {
    writer.writeInt32(3, f)
  }
}

/**
 * optional string requestId = 1;
 * @return {string}
 */
proto.network.forta.EvaluateTxRequest.prototype.getRequestid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.EvaluateTxRequest} returns this
 */
proto.network.forta.EvaluateTxRequest.prototype.setRequestid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional TransactionEvent event = 2;
 * @return {?proto.network.forta.TransactionEvent}
 */
proto.network.forta.EvaluateTxRequest.prototype.getEvent = function () {
  return /** @type{?proto.network.forta.TransactionEvent} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.TransactionEvent, 2)
  )
}

/**
 * @param {?proto.network.forta.TransactionEvent|undefined} value
 * @return {!proto.network.forta.EvaluateTxRequest} returns this
 */
proto.network.forta.EvaluateTxRequest.prototype.setEvent = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.EvaluateTxRequest} returns this
 */
proto.network.forta.EvaluateTxRequest.prototype.clearEvent = function () {
  return this.setEvent(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.EvaluateTxRequest.prototype.hasEvent = function () {
  return jspb.Message.getField(this, 2) != null
}

/**
 * optional int32 shardId = 3;
 * @return {number}
 */
proto.network.forta.EvaluateTxRequest.prototype.getShardid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.EvaluateTxRequest} returns this
 */
proto.network.forta.EvaluateTxRequest.prototype.setShardid = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.EvaluateBlockRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.EvaluateBlockRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.EvaluateBlockRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.EvaluateBlockRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        requestid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        event: (f = msg.getEvent()) && proto.network.forta.BlockEvent.toObject(includeInstance, f),
        shardid: jspb.Message.getFieldWithDefault(msg, 3, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.EvaluateBlockRequest}
 */
proto.network.forta.EvaluateBlockRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.EvaluateBlockRequest()
  return proto.network.forta.EvaluateBlockRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.EvaluateBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.EvaluateBlockRequest}
 */
proto.network.forta.EvaluateBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setRequestid(value)
        break
      case 2:
        var value = new proto.network.forta.BlockEvent()
        reader.readMessage(value, proto.network.forta.BlockEvent.deserializeBinaryFromReader)
        msg.setEvent(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setShardid(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.EvaluateBlockRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.EvaluateBlockRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.EvaluateBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.EvaluateBlockRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getRequestid()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getEvent()
  if (f != null) {
    writer.writeMessage(2, f, proto.network.forta.BlockEvent.serializeBinaryToWriter)
  }
  f = message.getShardid()
  if (f !== 0) {
    writer.writeInt32(3, f)
  }
}

/**
 * optional string requestId = 1;
 * @return {string}
 */
proto.network.forta.EvaluateBlockRequest.prototype.getRequestid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.EvaluateBlockRequest} returns this
 */
proto.network.forta.EvaluateBlockRequest.prototype.setRequestid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional BlockEvent event = 2;
 * @return {?proto.network.forta.BlockEvent}
 */
proto.network.forta.EvaluateBlockRequest.prototype.getEvent = function () {
  return /** @type{?proto.network.forta.BlockEvent} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.BlockEvent, 2)
  )
}

/**
 * @param {?proto.network.forta.BlockEvent|undefined} value
 * @return {!proto.network.forta.EvaluateBlockRequest} returns this
 */
proto.network.forta.EvaluateBlockRequest.prototype.setEvent = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.EvaluateBlockRequest} returns this
 */
proto.network.forta.EvaluateBlockRequest.prototype.clearEvent = function () {
  return this.setEvent(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.EvaluateBlockRequest.prototype.hasEvent = function () {
  return jspb.Message.getField(this, 2) != null
}

/**
 * optional int32 shardId = 3;
 * @return {number}
 */
proto.network.forta.EvaluateBlockRequest.prototype.getShardid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.EvaluateBlockRequest} returns this
 */
proto.network.forta.EvaluateBlockRequest.prototype.setShardid = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.EvaluateAlertRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.EvaluateAlertRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.EvaluateAlertRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.EvaluateAlertRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        requestid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        event: (f = msg.getEvent()) && proto.network.forta.AlertEvent.toObject(includeInstance, f),
        targetbotid: jspb.Message.getFieldWithDefault(msg, 3, ''),
        shardid: jspb.Message.getFieldWithDefault(msg, 4, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.EvaluateAlertRequest}
 */
proto.network.forta.EvaluateAlertRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.EvaluateAlertRequest()
  return proto.network.forta.EvaluateAlertRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.EvaluateAlertRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.EvaluateAlertRequest}
 */
proto.network.forta.EvaluateAlertRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setRequestid(value)
        break
      case 2:
        var value = new proto.network.forta.AlertEvent()
        reader.readMessage(value, proto.network.forta.AlertEvent.deserializeBinaryFromReader)
        msg.setEvent(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setTargetbotid(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setShardid(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.EvaluateAlertRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.EvaluateAlertRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.EvaluateAlertRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.EvaluateAlertRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getRequestid()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getEvent()
  if (f != null) {
    writer.writeMessage(2, f, proto.network.forta.AlertEvent.serializeBinaryToWriter)
  }
  f = message.getTargetbotid()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getShardid()
  if (f !== 0) {
    writer.writeInt32(4, f)
  }
}

/**
 * optional string requestId = 1;
 * @return {string}
 */
proto.network.forta.EvaluateAlertRequest.prototype.getRequestid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.EvaluateAlertRequest} returns this
 */
proto.network.forta.EvaluateAlertRequest.prototype.setRequestid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional AlertEvent event = 2;
 * @return {?proto.network.forta.AlertEvent}
 */
proto.network.forta.EvaluateAlertRequest.prototype.getEvent = function () {
  return /** @type{?proto.network.forta.AlertEvent} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.AlertEvent, 2)
  )
}

/**
 * @param {?proto.network.forta.AlertEvent|undefined} value
 * @return {!proto.network.forta.EvaluateAlertRequest} returns this
 */
proto.network.forta.EvaluateAlertRequest.prototype.setEvent = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.EvaluateAlertRequest} returns this
 */
proto.network.forta.EvaluateAlertRequest.prototype.clearEvent = function () {
  return this.setEvent(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.EvaluateAlertRequest.prototype.hasEvent = function () {
  return jspb.Message.getField(this, 2) != null
}

/**
 * optional string targetBotId = 3;
 * @return {string}
 */
proto.network.forta.EvaluateAlertRequest.prototype.getTargetbotid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.EvaluateAlertRequest} returns this
 */
proto.network.forta.EvaluateAlertRequest.prototype.setTargetbotid = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional int32 shardId = 4;
 * @return {number}
 */
proto.network.forta.EvaluateAlertRequest.prototype.getShardid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.EvaluateAlertRequest} returns this
 */
proto.network.forta.EvaluateAlertRequest.prototype.setShardid = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.EvaluateTxResponse.repeatedFields_ = [2, 3]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.EvaluateTxResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.EvaluateTxResponse.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.EvaluateTxResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.EvaluateTxResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, 0),
        errorsList: jspb.Message.toObjectList(msg.getErrorsList(), proto.network.forta.Error.toObject, includeInstance),
        findingsList: jspb.Message.toObjectList(msg.getFindingsList(), alert_pb.Finding.toObject, includeInstance),
        metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
        timestamp: jspb.Message.getFieldWithDefault(msg, 5, ''),
        latencyms: jspb.Message.getFieldWithDefault(msg, 6, 0),
        pb_private: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.EvaluateTxResponse}
 */
proto.network.forta.EvaluateTxResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.EvaluateTxResponse()
  return proto.network.forta.EvaluateTxResponse.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.EvaluateTxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.EvaluateTxResponse}
 */
proto.network.forta.EvaluateTxResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.network.forta.ResponseStatus} */ (reader.readEnum())
        msg.setStatus(value)
        break
      case 2:
        var value = new proto.network.forta.Error()
        reader.readMessage(value, proto.network.forta.Error.deserializeBinaryFromReader)
        msg.addErrors(value)
        break
      case 3:
        var value = new alert_pb.Finding()
        reader.readMessage(value, alert_pb.Finding.deserializeBinaryFromReader)
        msg.addFindings(value)
        break
      case 4:
        var value = msg.getMetadataMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            '',
          )
        })
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setTimestamp(value)
        break
      case 6:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setLatencyms(value)
        break
      case 7:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setPrivate(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.EvaluateTxResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.EvaluateTxResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.EvaluateTxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.EvaluateTxResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getStatus()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getErrorsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.network.forta.Error.serializeBinaryToWriter)
  }
  f = message.getFindingsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, alert_pb.Finding.serializeBinaryToWriter)
  }
  f = message.getMetadataMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString)
  }
  f = message.getTimestamp()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getLatencyms()
  if (f !== 0) {
    writer.writeUint32(6, f)
  }
  f = message.getPrivate()
  if (f) {
    writer.writeBool(7, f)
  }
}

/**
 * optional ResponseStatus status = 1;
 * @return {!proto.network.forta.ResponseStatus}
 */
proto.network.forta.EvaluateTxResponse.prototype.getStatus = function () {
  return /** @type {!proto.network.forta.ResponseStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {!proto.network.forta.ResponseStatus} value
 * @return {!proto.network.forta.EvaluateTxResponse} returns this
 */
proto.network.forta.EvaluateTxResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * repeated Error errors = 2;
 * @return {!Array<!proto.network.forta.Error>}
 */
proto.network.forta.EvaluateTxResponse.prototype.getErrorsList = function () {
  return /** @type{!Array<!proto.network.forta.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.Error, 2)
  )
}

/**
 * @param {!Array<!proto.network.forta.Error>} value
 * @return {!proto.network.forta.EvaluateTxResponse} returns this
 */
proto.network.forta.EvaluateTxResponse.prototype.setErrorsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.network.forta.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Error}
 */
proto.network.forta.EvaluateTxResponse.prototype.addErrors = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.network.forta.Error, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.EvaluateTxResponse} returns this
 */
proto.network.forta.EvaluateTxResponse.prototype.clearErrorsList = function () {
  return this.setErrorsList([])
}

/**
 * repeated Finding findings = 3;
 * @return {!Array<!proto.network.forta.Finding>}
 */
proto.network.forta.EvaluateTxResponse.prototype.getFindingsList = function () {
  return /** @type{!Array<!proto.network.forta.Finding>} */ (
    jspb.Message.getRepeatedWrapperField(this, alert_pb.Finding, 3)
  )
}

/**
 * @param {!Array<!proto.network.forta.Finding>} value
 * @return {!proto.network.forta.EvaluateTxResponse} returns this
 */
proto.network.forta.EvaluateTxResponse.prototype.setFindingsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value)
}

/**
 * @param {!proto.network.forta.Finding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Finding}
 */
proto.network.forta.EvaluateTxResponse.prototype.addFindings = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.network.forta.Finding, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.EvaluateTxResponse} returns this
 */
proto.network.forta.EvaluateTxResponse.prototype.clearFindingsList = function () {
  return this.setFindingsList([])
}

/**
 * map<string, string> metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.network.forta.EvaluateTxResponse.prototype.getMetadataMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 4, opt_noLazyCreate, null))
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.network.forta.EvaluateTxResponse} returns this
 */
proto.network.forta.EvaluateTxResponse.prototype.clearMetadataMap = function () {
  this.getMetadataMap().clear()
  return this
}

/**
 * optional string timestamp = 5;
 * @return {string}
 */
proto.network.forta.EvaluateTxResponse.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.EvaluateTxResponse} returns this
 */
proto.network.forta.EvaluateTxResponse.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional uint32 latencyMs = 6;
 * @return {number}
 */
proto.network.forta.EvaluateTxResponse.prototype.getLatencyms = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.EvaluateTxResponse} returns this
 */
proto.network.forta.EvaluateTxResponse.prototype.setLatencyms = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value)
}

/**
 * optional bool private = 7;
 * @return {boolean}
 */
proto.network.forta.EvaluateTxResponse.prototype.getPrivate = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false))
}

/**
 * @param {boolean} value
 * @return {!proto.network.forta.EvaluateTxResponse} returns this
 */
proto.network.forta.EvaluateTxResponse.prototype.setPrivate = function (value) {
  return jspb.Message.setProto3BooleanField(this, 7, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.EvaluateBlockResponse.repeatedFields_ = [2, 3]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.EvaluateBlockResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.EvaluateBlockResponse.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.EvaluateBlockResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.EvaluateBlockResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, 0),
        errorsList: jspb.Message.toObjectList(msg.getErrorsList(), proto.network.forta.Error.toObject, includeInstance),
        findingsList: jspb.Message.toObjectList(msg.getFindingsList(), alert_pb.Finding.toObject, includeInstance),
        metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
        timestamp: jspb.Message.getFieldWithDefault(msg, 5, ''),
        latencyms: jspb.Message.getFieldWithDefault(msg, 6, 0),
        pb_private: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.EvaluateBlockResponse}
 */
proto.network.forta.EvaluateBlockResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.EvaluateBlockResponse()
  return proto.network.forta.EvaluateBlockResponse.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.EvaluateBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.EvaluateBlockResponse}
 */
proto.network.forta.EvaluateBlockResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.network.forta.ResponseStatus} */ (reader.readEnum())
        msg.setStatus(value)
        break
      case 2:
        var value = new proto.network.forta.Error()
        reader.readMessage(value, proto.network.forta.Error.deserializeBinaryFromReader)
        msg.addErrors(value)
        break
      case 3:
        var value = new alert_pb.Finding()
        reader.readMessage(value, alert_pb.Finding.deserializeBinaryFromReader)
        msg.addFindings(value)
        break
      case 4:
        var value = msg.getMetadataMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            '',
          )
        })
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setTimestamp(value)
        break
      case 6:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setLatencyms(value)
        break
      case 7:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setPrivate(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.EvaluateBlockResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.EvaluateBlockResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.EvaluateBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.EvaluateBlockResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getStatus()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getErrorsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.network.forta.Error.serializeBinaryToWriter)
  }
  f = message.getFindingsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, alert_pb.Finding.serializeBinaryToWriter)
  }
  f = message.getMetadataMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString)
  }
  f = message.getTimestamp()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getLatencyms()
  if (f !== 0) {
    writer.writeUint32(6, f)
  }
  f = message.getPrivate()
  if (f) {
    writer.writeBool(7, f)
  }
}

/**
 * optional ResponseStatus status = 1;
 * @return {!proto.network.forta.ResponseStatus}
 */
proto.network.forta.EvaluateBlockResponse.prototype.getStatus = function () {
  return /** @type {!proto.network.forta.ResponseStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {!proto.network.forta.ResponseStatus} value
 * @return {!proto.network.forta.EvaluateBlockResponse} returns this
 */
proto.network.forta.EvaluateBlockResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * repeated Error errors = 2;
 * @return {!Array<!proto.network.forta.Error>}
 */
proto.network.forta.EvaluateBlockResponse.prototype.getErrorsList = function () {
  return /** @type{!Array<!proto.network.forta.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.Error, 2)
  )
}

/**
 * @param {!Array<!proto.network.forta.Error>} value
 * @return {!proto.network.forta.EvaluateBlockResponse} returns this
 */
proto.network.forta.EvaluateBlockResponse.prototype.setErrorsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.network.forta.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Error}
 */
proto.network.forta.EvaluateBlockResponse.prototype.addErrors = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.network.forta.Error, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.EvaluateBlockResponse} returns this
 */
proto.network.forta.EvaluateBlockResponse.prototype.clearErrorsList = function () {
  return this.setErrorsList([])
}

/**
 * repeated Finding findings = 3;
 * @return {!Array<!proto.network.forta.Finding>}
 */
proto.network.forta.EvaluateBlockResponse.prototype.getFindingsList = function () {
  return /** @type{!Array<!proto.network.forta.Finding>} */ (
    jspb.Message.getRepeatedWrapperField(this, alert_pb.Finding, 3)
  )
}

/**
 * @param {!Array<!proto.network.forta.Finding>} value
 * @return {!proto.network.forta.EvaluateBlockResponse} returns this
 */
proto.network.forta.EvaluateBlockResponse.prototype.setFindingsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value)
}

/**
 * @param {!proto.network.forta.Finding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Finding}
 */
proto.network.forta.EvaluateBlockResponse.prototype.addFindings = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.network.forta.Finding, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.EvaluateBlockResponse} returns this
 */
proto.network.forta.EvaluateBlockResponse.prototype.clearFindingsList = function () {
  return this.setFindingsList([])
}

/**
 * map<string, string> metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.network.forta.EvaluateBlockResponse.prototype.getMetadataMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 4, opt_noLazyCreate, null))
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.network.forta.EvaluateBlockResponse} returns this
 */
proto.network.forta.EvaluateBlockResponse.prototype.clearMetadataMap = function () {
  this.getMetadataMap().clear()
  return this
}

/**
 * optional string timestamp = 5;
 * @return {string}
 */
proto.network.forta.EvaluateBlockResponse.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.EvaluateBlockResponse} returns this
 */
proto.network.forta.EvaluateBlockResponse.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional uint32 latencyMs = 6;
 * @return {number}
 */
proto.network.forta.EvaluateBlockResponse.prototype.getLatencyms = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.EvaluateBlockResponse} returns this
 */
proto.network.forta.EvaluateBlockResponse.prototype.setLatencyms = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value)
}

/**
 * optional bool private = 7;
 * @return {boolean}
 */
proto.network.forta.EvaluateBlockResponse.prototype.getPrivate = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false))
}

/**
 * @param {boolean} value
 * @return {!proto.network.forta.EvaluateBlockResponse} returns this
 */
proto.network.forta.EvaluateBlockResponse.prototype.setPrivate = function (value) {
  return jspb.Message.setProto3BooleanField(this, 7, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.EvaluateAlertResponse.repeatedFields_ = [2, 3]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.EvaluateAlertResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.EvaluateAlertResponse.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.EvaluateAlertResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.EvaluateAlertResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, 0),
        errorsList: jspb.Message.toObjectList(msg.getErrorsList(), proto.network.forta.Error.toObject, includeInstance),
        findingsList: jspb.Message.toObjectList(msg.getFindingsList(), alert_pb.Finding.toObject, includeInstance),
        metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
        timestamp: jspb.Message.getFieldWithDefault(msg, 5, ''),
        latencyms: jspb.Message.getFieldWithDefault(msg, 6, 0),
        pb_private: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.EvaluateAlertResponse}
 */
proto.network.forta.EvaluateAlertResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.EvaluateAlertResponse()
  return proto.network.forta.EvaluateAlertResponse.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.EvaluateAlertResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.EvaluateAlertResponse}
 */
proto.network.forta.EvaluateAlertResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.network.forta.ResponseStatus} */ (reader.readEnum())
        msg.setStatus(value)
        break
      case 2:
        var value = new proto.network.forta.Error()
        reader.readMessage(value, proto.network.forta.Error.deserializeBinaryFromReader)
        msg.addErrors(value)
        break
      case 3:
        var value = new alert_pb.Finding()
        reader.readMessage(value, alert_pb.Finding.deserializeBinaryFromReader)
        msg.addFindings(value)
        break
      case 4:
        var value = msg.getMetadataMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            '',
          )
        })
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setTimestamp(value)
        break
      case 6:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setLatencyms(value)
        break
      case 7:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setPrivate(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.EvaluateAlertResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.EvaluateAlertResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.EvaluateAlertResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.EvaluateAlertResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getStatus()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getErrorsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.network.forta.Error.serializeBinaryToWriter)
  }
  f = message.getFindingsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, alert_pb.Finding.serializeBinaryToWriter)
  }
  f = message.getMetadataMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString)
  }
  f = message.getTimestamp()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getLatencyms()
  if (f !== 0) {
    writer.writeUint32(6, f)
  }
  f = message.getPrivate()
  if (f) {
    writer.writeBool(7, f)
  }
}

/**
 * optional ResponseStatus status = 1;
 * @return {!proto.network.forta.ResponseStatus}
 */
proto.network.forta.EvaluateAlertResponse.prototype.getStatus = function () {
  return /** @type {!proto.network.forta.ResponseStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {!proto.network.forta.ResponseStatus} value
 * @return {!proto.network.forta.EvaluateAlertResponse} returns this
 */
proto.network.forta.EvaluateAlertResponse.prototype.setStatus = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * repeated Error errors = 2;
 * @return {!Array<!proto.network.forta.Error>}
 */
proto.network.forta.EvaluateAlertResponse.prototype.getErrorsList = function () {
  return /** @type{!Array<!proto.network.forta.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.Error, 2)
  )
}

/**
 * @param {!Array<!proto.network.forta.Error>} value
 * @return {!proto.network.forta.EvaluateAlertResponse} returns this
 */
proto.network.forta.EvaluateAlertResponse.prototype.setErrorsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.network.forta.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Error}
 */
proto.network.forta.EvaluateAlertResponse.prototype.addErrors = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.network.forta.Error, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.EvaluateAlertResponse} returns this
 */
proto.network.forta.EvaluateAlertResponse.prototype.clearErrorsList = function () {
  return this.setErrorsList([])
}

/**
 * repeated Finding findings = 3;
 * @return {!Array<!proto.network.forta.Finding>}
 */
proto.network.forta.EvaluateAlertResponse.prototype.getFindingsList = function () {
  return /** @type{!Array<!proto.network.forta.Finding>} */ (
    jspb.Message.getRepeatedWrapperField(this, alert_pb.Finding, 3)
  )
}

/**
 * @param {!Array<!proto.network.forta.Finding>} value
 * @return {!proto.network.forta.EvaluateAlertResponse} returns this
 */
proto.network.forta.EvaluateAlertResponse.prototype.setFindingsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value)
}

/**
 * @param {!proto.network.forta.Finding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.Finding}
 */
proto.network.forta.EvaluateAlertResponse.prototype.addFindings = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.network.forta.Finding, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.EvaluateAlertResponse} returns this
 */
proto.network.forta.EvaluateAlertResponse.prototype.clearFindingsList = function () {
  return this.setFindingsList([])
}

/**
 * map<string, string> metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.network.forta.EvaluateAlertResponse.prototype.getMetadataMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 4, opt_noLazyCreate, null))
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.network.forta.EvaluateAlertResponse} returns this
 */
proto.network.forta.EvaluateAlertResponse.prototype.clearMetadataMap = function () {
  this.getMetadataMap().clear()
  return this
}

/**
 * optional string timestamp = 5;
 * @return {string}
 */
proto.network.forta.EvaluateAlertResponse.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.EvaluateAlertResponse} returns this
 */
proto.network.forta.EvaluateAlertResponse.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional uint32 latencyMs = 6;
 * @return {number}
 */
proto.network.forta.EvaluateAlertResponse.prototype.getLatencyms = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.EvaluateAlertResponse} returns this
 */
proto.network.forta.EvaluateAlertResponse.prototype.setLatencyms = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value)
}

/**
 * optional bool private = 7;
 * @return {boolean}
 */
proto.network.forta.EvaluateAlertResponse.prototype.getPrivate = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false))
}

/**
 * @param {boolean} value
 * @return {!proto.network.forta.EvaluateAlertResponse} returns this
 */
proto.network.forta.EvaluateAlertResponse.prototype.setPrivate = function (value) {
  return jspb.Message.setProto3BooleanField(this, 7, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.BlockEvent.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.BlockEvent.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.BlockEvent} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.BlockEvent.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, 0),
        blockhash: jspb.Message.getFieldWithDefault(msg, 2, ''),
        blocknumber: jspb.Message.getFieldWithDefault(msg, 3, ''),
        network: (f = msg.getNetwork()) && proto.network.forta.BlockEvent.Network.toObject(includeInstance, f),
        block: (f = msg.getBlock()) && proto.network.forta.BlockEvent.EthBlock.toObject(includeInstance, f),
        timestamps: (f = msg.getTimestamps()) && alert_pb.TrackingTimestamps.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.BlockEvent}
 */
proto.network.forta.BlockEvent.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.BlockEvent()
  return proto.network.forta.BlockEvent.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.BlockEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.BlockEvent}
 */
proto.network.forta.BlockEvent.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.network.forta.BlockEvent.EventType} */ (reader.readEnum())
        msg.setType(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlockhash(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlocknumber(value)
        break
      case 4:
        var value = new proto.network.forta.BlockEvent.Network()
        reader.readMessage(value, proto.network.forta.BlockEvent.Network.deserializeBinaryFromReader)
        msg.setNetwork(value)
        break
      case 5:
        var value = new proto.network.forta.BlockEvent.EthBlock()
        reader.readMessage(value, proto.network.forta.BlockEvent.EthBlock.deserializeBinaryFromReader)
        msg.setBlock(value)
        break
      case 6:
        var value = new alert_pb.TrackingTimestamps()
        reader.readMessage(value, alert_pb.TrackingTimestamps.deserializeBinaryFromReader)
        msg.setTimestamps(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.BlockEvent.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.BlockEvent.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.BlockEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.BlockEvent.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getBlockhash()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getBlocknumber()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getNetwork()
  if (f != null) {
    writer.writeMessage(4, f, proto.network.forta.BlockEvent.Network.serializeBinaryToWriter)
  }
  f = message.getBlock()
  if (f != null) {
    writer.writeMessage(5, f, proto.network.forta.BlockEvent.EthBlock.serializeBinaryToWriter)
  }
  f = message.getTimestamps()
  if (f != null) {
    writer.writeMessage(6, f, alert_pb.TrackingTimestamps.serializeBinaryToWriter)
  }
}

/**
 * @enum {number}
 */
proto.network.forta.BlockEvent.EventType = {
  BLOCK: 0,
  REORG: 1,
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.BlockEvent.Network.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.BlockEvent.Network.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.BlockEvent.Network} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.BlockEvent.Network.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chainid: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.BlockEvent.Network}
 */
proto.network.forta.BlockEvent.Network.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.BlockEvent.Network()
  return proto.network.forta.BlockEvent.Network.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.BlockEvent.Network} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.BlockEvent.Network}
 */
proto.network.forta.BlockEvent.Network.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setChainid(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.BlockEvent.Network.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.BlockEvent.Network.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.BlockEvent.Network} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.BlockEvent.Network.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getChainid()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string chainId = 1;
 * @return {string}
 */
proto.network.forta.BlockEvent.Network.prototype.getChainid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.Network} returns this
 */
proto.network.forta.BlockEvent.Network.prototype.setChainid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.BlockEvent.EthBlock.repeatedFields_ = [18, 20]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.BlockEvent.EthBlock.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.BlockEvent.EthBlock.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.BlockEvent.EthBlock} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.BlockEvent.EthBlock.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        difficulty: jspb.Message.getFieldWithDefault(msg, 1, ''),
        extradata: jspb.Message.getFieldWithDefault(msg, 2, ''),
        gaslimit: jspb.Message.getFieldWithDefault(msg, 3, ''),
        gasused: jspb.Message.getFieldWithDefault(msg, 4, ''),
        hash: jspb.Message.getFieldWithDefault(msg, 5, ''),
        logsbloom: jspb.Message.getFieldWithDefault(msg, 6, ''),
        miner: jspb.Message.getFieldWithDefault(msg, 7, ''),
        mixhash: jspb.Message.getFieldWithDefault(msg, 8, ''),
        nonce: jspb.Message.getFieldWithDefault(msg, 9, ''),
        number: jspb.Message.getFieldWithDefault(msg, 10, ''),
        parenthash: jspb.Message.getFieldWithDefault(msg, 11, ''),
        receiptsroot: jspb.Message.getFieldWithDefault(msg, 12, ''),
        sha3uncles: jspb.Message.getFieldWithDefault(msg, 13, ''),
        size: jspb.Message.getFieldWithDefault(msg, 14, ''),
        stateroot: jspb.Message.getFieldWithDefault(msg, 15, ''),
        timestamp: jspb.Message.getFieldWithDefault(msg, 16, ''),
        totaldifficulty: jspb.Message.getFieldWithDefault(msg, 17, ''),
        transactionsList: (f = jspb.Message.getRepeatedField(msg, 18)) == null ? undefined : f,
        transactionsroot: jspb.Message.getFieldWithDefault(msg, 19, ''),
        unclesList: (f = jspb.Message.getRepeatedField(msg, 20)) == null ? undefined : f,
        basefeepergas: jspb.Message.getFieldWithDefault(msg, 21, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.BlockEvent.EthBlock}
 */
proto.network.forta.BlockEvent.EthBlock.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.BlockEvent.EthBlock()
  return proto.network.forta.BlockEvent.EthBlock.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.BlockEvent.EthBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.BlockEvent.EthBlock}
 */
proto.network.forta.BlockEvent.EthBlock.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setDifficulty(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setExtradata(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setGaslimit(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setGasused(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setLogsbloom(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setMiner(value)
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.setMixhash(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setNonce(value)
        break
      case 10:
        var value = /** @type {string} */ (reader.readString())
        msg.setNumber(value)
        break
      case 11:
        var value = /** @type {string} */ (reader.readString())
        msg.setParenthash(value)
        break
      case 12:
        var value = /** @type {string} */ (reader.readString())
        msg.setReceiptsroot(value)
        break
      case 13:
        var value = /** @type {string} */ (reader.readString())
        msg.setSha3uncles(value)
        break
      case 14:
        var value = /** @type {string} */ (reader.readString())
        msg.setSize(value)
        break
      case 15:
        var value = /** @type {string} */ (reader.readString())
        msg.setStateroot(value)
        break
      case 16:
        var value = /** @type {string} */ (reader.readString())
        msg.setTimestamp(value)
        break
      case 17:
        var value = /** @type {string} */ (reader.readString())
        msg.setTotaldifficulty(value)
        break
      case 18:
        var value = /** @type {string} */ (reader.readString())
        msg.addTransactions(value)
        break
      case 19:
        var value = /** @type {string} */ (reader.readString())
        msg.setTransactionsroot(value)
        break
      case 20:
        var value = /** @type {string} */ (reader.readString())
        msg.addUncles(value)
        break
      case 21:
        var value = /** @type {string} */ (reader.readString())
        msg.setBasefeepergas(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.BlockEvent.EthBlock.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.BlockEvent.EthBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.BlockEvent.EthBlock.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getDifficulty()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getExtradata()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getGaslimit()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getGasused()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getLogsbloom()
  if (f.length > 0) {
    writer.writeString(6, f)
  }
  f = message.getMiner()
  if (f.length > 0) {
    writer.writeString(7, f)
  }
  f = message.getMixhash()
  if (f.length > 0) {
    writer.writeString(8, f)
  }
  f = message.getNonce()
  if (f.length > 0) {
    writer.writeString(9, f)
  }
  f = message.getNumber()
  if (f.length > 0) {
    writer.writeString(10, f)
  }
  f = message.getParenthash()
  if (f.length > 0) {
    writer.writeString(11, f)
  }
  f = message.getReceiptsroot()
  if (f.length > 0) {
    writer.writeString(12, f)
  }
  f = message.getSha3uncles()
  if (f.length > 0) {
    writer.writeString(13, f)
  }
  f = message.getSize()
  if (f.length > 0) {
    writer.writeString(14, f)
  }
  f = message.getStateroot()
  if (f.length > 0) {
    writer.writeString(15, f)
  }
  f = message.getTimestamp()
  if (f.length > 0) {
    writer.writeString(16, f)
  }
  f = message.getTotaldifficulty()
  if (f.length > 0) {
    writer.writeString(17, f)
  }
  f = message.getTransactionsList()
  if (f.length > 0) {
    writer.writeRepeatedString(18, f)
  }
  f = message.getTransactionsroot()
  if (f.length > 0) {
    writer.writeString(19, f)
  }
  f = message.getUnclesList()
  if (f.length > 0) {
    writer.writeRepeatedString(20, f)
  }
  f = message.getBasefeepergas()
  if (f.length > 0) {
    writer.writeString(21, f)
  }
}

/**
 * optional string difficulty = 1;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getDifficulty = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setDifficulty = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string extraData = 2;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getExtradata = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setExtradata = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string gasLimit = 3;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getGaslimit = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setGaslimit = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string gasUsed = 4;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getGasused = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setGasused = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string hash = 5;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setHash = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string logsBloom = 6;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getLogsbloom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setLogsbloom = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * optional string miner = 7;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getMiner = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setMiner = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * optional string mixHash = 8;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getMixhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setMixhash = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value)
}

/**
 * optional string nonce = 9;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getNonce = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setNonce = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value)
}

/**
 * optional string number = 10;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getNumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setNumber = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value)
}

/**
 * optional string parentHash = 11;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getParenthash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setParenthash = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value)
}

/**
 * optional string receiptsRoot = 12;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getReceiptsroot = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setReceiptsroot = function (value) {
  return jspb.Message.setProto3StringField(this, 12, value)
}

/**
 * optional string sha3Uncles = 13;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getSha3uncles = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setSha3uncles = function (value) {
  return jspb.Message.setProto3StringField(this, 13, value)
}

/**
 * optional string size = 14;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getSize = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setSize = function (value) {
  return jspb.Message.setProto3StringField(this, 14, value)
}

/**
 * optional string stateRoot = 15;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getStateroot = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setStateroot = function (value) {
  return jspb.Message.setProto3StringField(this, 15, value)
}

/**
 * optional string timestamp = 16;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 16, value)
}

/**
 * optional string totalDifficulty = 17;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getTotaldifficulty = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setTotaldifficulty = function (value) {
  return jspb.Message.setProto3StringField(this, 17, value)
}

/**
 * repeated string transactions = 18;
 * @return {!Array<string>}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getTransactionsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 18))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setTransactionsList = function (value) {
  return jspb.Message.setField(this, 18, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.addTransactions = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 18, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.clearTransactionsList = function () {
  return this.setTransactionsList([])
}

/**
 * optional string transactionsRoot = 19;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getTransactionsroot = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setTransactionsroot = function (value) {
  return jspb.Message.setProto3StringField(this, 19, value)
}

/**
 * repeated string uncles = 20;
 * @return {!Array<string>}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getUnclesList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 20))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setUnclesList = function (value) {
  return jspb.Message.setField(this, 20, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.addUncles = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 20, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.clearUnclesList = function () {
  return this.setUnclesList([])
}

/**
 * optional string baseFeePerGas = 21;
 * @return {string}
 */
proto.network.forta.BlockEvent.EthBlock.prototype.getBasefeepergas = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent.EthBlock} returns this
 */
proto.network.forta.BlockEvent.EthBlock.prototype.setBasefeepergas = function (value) {
  return jspb.Message.setProto3StringField(this, 21, value)
}

/**
 * optional EventType type = 1;
 * @return {!proto.network.forta.BlockEvent.EventType}
 */
proto.network.forta.BlockEvent.prototype.getType = function () {
  return /** @type {!proto.network.forta.BlockEvent.EventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {!proto.network.forta.BlockEvent.EventType} value
 * @return {!proto.network.forta.BlockEvent} returns this
 */
proto.network.forta.BlockEvent.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * optional string blockHash = 2;
 * @return {string}
 */
proto.network.forta.BlockEvent.prototype.getBlockhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent} returns this
 */
proto.network.forta.BlockEvent.prototype.setBlockhash = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string blockNumber = 3;
 * @return {string}
 */
proto.network.forta.BlockEvent.prototype.getBlocknumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.BlockEvent} returns this
 */
proto.network.forta.BlockEvent.prototype.setBlocknumber = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional Network network = 4;
 * @return {?proto.network.forta.BlockEvent.Network}
 */
proto.network.forta.BlockEvent.prototype.getNetwork = function () {
  return /** @type{?proto.network.forta.BlockEvent.Network} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.BlockEvent.Network, 4)
  )
}

/**
 * @param {?proto.network.forta.BlockEvent.Network|undefined} value
 * @return {!proto.network.forta.BlockEvent} returns this
 */
proto.network.forta.BlockEvent.prototype.setNetwork = function (value) {
  return jspb.Message.setWrapperField(this, 4, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.BlockEvent} returns this
 */
proto.network.forta.BlockEvent.prototype.clearNetwork = function () {
  return this.setNetwork(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.BlockEvent.prototype.hasNetwork = function () {
  return jspb.Message.getField(this, 4) != null
}

/**
 * optional EthBlock block = 5;
 * @return {?proto.network.forta.BlockEvent.EthBlock}
 */
proto.network.forta.BlockEvent.prototype.getBlock = function () {
  return /** @type{?proto.network.forta.BlockEvent.EthBlock} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.BlockEvent.EthBlock, 5)
  )
}

/**
 * @param {?proto.network.forta.BlockEvent.EthBlock|undefined} value
 * @return {!proto.network.forta.BlockEvent} returns this
 */
proto.network.forta.BlockEvent.prototype.setBlock = function (value) {
  return jspb.Message.setWrapperField(this, 5, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.BlockEvent} returns this
 */
proto.network.forta.BlockEvent.prototype.clearBlock = function () {
  return this.setBlock(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.BlockEvent.prototype.hasBlock = function () {
  return jspb.Message.getField(this, 5) != null
}

/**
 * optional TrackingTimestamps timestamps = 6;
 * @return {?proto.network.forta.TrackingTimestamps}
 */
proto.network.forta.BlockEvent.prototype.getTimestamps = function () {
  return /** @type{?proto.network.forta.TrackingTimestamps} */ (
    jspb.Message.getWrapperField(this, alert_pb.TrackingTimestamps, 6)
  )
}

/**
 * @param {?proto.network.forta.TrackingTimestamps|undefined} value
 * @return {!proto.network.forta.BlockEvent} returns this
 */
proto.network.forta.BlockEvent.prototype.setTimestamps = function (value) {
  return jspb.Message.setWrapperField(this, 6, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.BlockEvent} returns this
 */
proto.network.forta.BlockEvent.prototype.clearTimestamps = function () {
  return this.setTimestamps(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.BlockEvent.prototype.hasTimestamps = function () {
  return jspb.Message.getField(this, 6) != null
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.TransactionEvent.repeatedFields_ = [5, 8]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.TransactionEvent.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.TransactionEvent.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.TransactionEvent} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.TransactionEvent.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, 0),
        transaction:
          (f = msg.getTransaction()) &&
          proto.network.forta.TransactionEvent.EthTransaction.toObject(includeInstance, f),
        receipt: (f = msg.getReceipt()) && proto.network.forta.TransactionEvent.EthReceipt.toObject(includeInstance, f),
        network: (f = msg.getNetwork()) && proto.network.forta.TransactionEvent.Network.toObject(includeInstance, f),
        tracesList: jspb.Message.toObjectList(
          msg.getTracesList(),
          proto.network.forta.TransactionEvent.Trace.toObject,
          includeInstance,
        ),
        addressesMap: (f = msg.getAddressesMap()) ? f.toObject(includeInstance, undefined) : [],
        block: (f = msg.getBlock()) && proto.network.forta.TransactionEvent.EthBlock.toObject(includeInstance, f),
        logsList: jspb.Message.toObjectList(
          msg.getLogsList(),
          proto.network.forta.TransactionEvent.Log.toObject,
          includeInstance,
        ),
        iscontractdeployment: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
        contractaddress: jspb.Message.getFieldWithDefault(msg, 10, ''),
        timestamps: (f = msg.getTimestamps()) && alert_pb.TrackingTimestamps.toObject(includeInstance, f),
        txaddressesMap: (f = msg.getTxaddressesMap()) ? f.toObject(includeInstance, undefined) : [],
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.TransactionEvent}
 */
proto.network.forta.TransactionEvent.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.TransactionEvent()
  return proto.network.forta.TransactionEvent.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.TransactionEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.TransactionEvent}
 */
proto.network.forta.TransactionEvent.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.network.forta.TransactionEvent.EventType} */ (reader.readEnum())
        msg.setType(value)
        break
      case 2:
        var value = new proto.network.forta.TransactionEvent.EthTransaction()
        reader.readMessage(value, proto.network.forta.TransactionEvent.EthTransaction.deserializeBinaryFromReader)
        msg.setTransaction(value)
        break
      case 3:
        var value = new proto.network.forta.TransactionEvent.EthReceipt()
        reader.readMessage(value, proto.network.forta.TransactionEvent.EthReceipt.deserializeBinaryFromReader)
        msg.setReceipt(value)
        break
      case 4:
        var value = new proto.network.forta.TransactionEvent.Network()
        reader.readMessage(value, proto.network.forta.TransactionEvent.Network.deserializeBinaryFromReader)
        msg.setNetwork(value)
        break
      case 5:
        var value = new proto.network.forta.TransactionEvent.Trace()
        reader.readMessage(value, proto.network.forta.TransactionEvent.Trace.deserializeBinaryFromReader)
        msg.addTraces(value)
        break
      case 6:
        var value = msg.getAddressesMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readBool,
            null,
            '',
            false,
          )
        })
        break
      case 7:
        var value = new proto.network.forta.TransactionEvent.EthBlock()
        reader.readMessage(value, proto.network.forta.TransactionEvent.EthBlock.deserializeBinaryFromReader)
        msg.setBlock(value)
        break
      case 8:
        var value = new proto.network.forta.TransactionEvent.Log()
        reader.readMessage(value, proto.network.forta.TransactionEvent.Log.deserializeBinaryFromReader)
        msg.addLogs(value)
        break
      case 9:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setIscontractdeployment(value)
        break
      case 10:
        var value = /** @type {string} */ (reader.readString())
        msg.setContractaddress(value)
        break
      case 11:
        var value = new alert_pb.TrackingTimestamps()
        reader.readMessage(value, alert_pb.TrackingTimestamps.deserializeBinaryFromReader)
        msg.setTimestamps(value)
        break
      case 12:
        var value = msg.getTxaddressesMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readBool,
            null,
            '',
            false,
          )
        })
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.TransactionEvent.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.TransactionEvent.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.TransactionEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.TransactionEvent.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getTransaction()
  if (f != null) {
    writer.writeMessage(2, f, proto.network.forta.TransactionEvent.EthTransaction.serializeBinaryToWriter)
  }
  f = message.getReceipt()
  if (f != null) {
    writer.writeMessage(3, f, proto.network.forta.TransactionEvent.EthReceipt.serializeBinaryToWriter)
  }
  f = message.getNetwork()
  if (f != null) {
    writer.writeMessage(4, f, proto.network.forta.TransactionEvent.Network.serializeBinaryToWriter)
  }
  f = message.getTracesList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(5, f, proto.network.forta.TransactionEvent.Trace.serializeBinaryToWriter)
  }
  f = message.getAddressesMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool)
  }
  f = message.getBlock()
  if (f != null) {
    writer.writeMessage(7, f, proto.network.forta.TransactionEvent.EthBlock.serializeBinaryToWriter)
  }
  f = message.getLogsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(8, f, proto.network.forta.TransactionEvent.Log.serializeBinaryToWriter)
  }
  f = message.getIscontractdeployment()
  if (f) {
    writer.writeBool(9, f)
  }
  f = message.getContractaddress()
  if (f.length > 0) {
    writer.writeString(10, f)
  }
  f = message.getTimestamps()
  if (f != null) {
    writer.writeMessage(11, f, alert_pb.TrackingTimestamps.serializeBinaryToWriter)
  }
  f = message.getTxaddressesMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool)
  }
}

/**
 * @enum {number}
 */
proto.network.forta.TransactionEvent.EventType = {
  BLOCK: 0,
  REORG: 1,
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.TransactionEvent.Network.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.TransactionEvent.Network.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.TransactionEvent.Network} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.TransactionEvent.Network.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chainid: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.TransactionEvent.Network}
 */
proto.network.forta.TransactionEvent.Network.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.TransactionEvent.Network()
  return proto.network.forta.TransactionEvent.Network.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.TransactionEvent.Network} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.TransactionEvent.Network}
 */
proto.network.forta.TransactionEvent.Network.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setChainid(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.TransactionEvent.Network.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.TransactionEvent.Network.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.TransactionEvent.Network} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.TransactionEvent.Network.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getChainid()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string chainId = 1;
 * @return {string}
 */
proto.network.forta.TransactionEvent.Network.prototype.getChainid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.Network} returns this
 */
proto.network.forta.TransactionEvent.Network.prototype.setChainid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.TransactionEvent.EthBlock.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.TransactionEvent.EthBlock.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.TransactionEvent.EthBlock} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.TransactionEvent.EthBlock.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        blockhash: jspb.Message.getFieldWithDefault(msg, 1, ''),
        blocknumber: jspb.Message.getFieldWithDefault(msg, 2, ''),
        blocktimestamp: jspb.Message.getFieldWithDefault(msg, 3, ''),
        basefeepergas: jspb.Message.getFieldWithDefault(msg, 4, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.TransactionEvent.EthBlock}
 */
proto.network.forta.TransactionEvent.EthBlock.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.TransactionEvent.EthBlock()
  return proto.network.forta.TransactionEvent.EthBlock.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.TransactionEvent.EthBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.TransactionEvent.EthBlock}
 */
proto.network.forta.TransactionEvent.EthBlock.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlockhash(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlocknumber(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlocktimestamp(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setBasefeepergas(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.TransactionEvent.EthBlock.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.TransactionEvent.EthBlock.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.TransactionEvent.EthBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.TransactionEvent.EthBlock.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getBlockhash()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getBlocknumber()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getBlocktimestamp()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getBasefeepergas()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
}

/**
 * optional string blockHash = 1;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthBlock.prototype.getBlockhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthBlock} returns this
 */
proto.network.forta.TransactionEvent.EthBlock.prototype.setBlockhash = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string blockNumber = 2;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthBlock.prototype.getBlocknumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthBlock} returns this
 */
proto.network.forta.TransactionEvent.EthBlock.prototype.setBlocknumber = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string blockTimestamp = 3;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthBlock.prototype.getBlocktimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthBlock} returns this
 */
proto.network.forta.TransactionEvent.EthBlock.prototype.setBlocktimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string baseFeePerGas = 4;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthBlock.prototype.getBasefeepergas = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthBlock} returns this
 */
proto.network.forta.TransactionEvent.EthBlock.prototype.setBasefeepergas = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.TransactionEvent.EthTransaction.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.TransactionEvent.EthTransaction.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.TransactionEvent.EthTransaction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.TransactionEvent.EthTransaction.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, ''),
        nonce: jspb.Message.getFieldWithDefault(msg, 2, ''),
        gasprice: jspb.Message.getFieldWithDefault(msg, 3, ''),
        gas: jspb.Message.getFieldWithDefault(msg, 4, ''),
        value: jspb.Message.getFieldWithDefault(msg, 5, ''),
        input: jspb.Message.getFieldWithDefault(msg, 6, ''),
        v: jspb.Message.getFieldWithDefault(msg, 7, ''),
        r: jspb.Message.getFieldWithDefault(msg, 8, ''),
        s: jspb.Message.getFieldWithDefault(msg, 9, ''),
        to: jspb.Message.getFieldWithDefault(msg, 10, ''),
        hash: jspb.Message.getFieldWithDefault(msg, 11, ''),
        from: jspb.Message.getFieldWithDefault(msg, 12, ''),
        maxfeepergas: jspb.Message.getFieldWithDefault(msg, 13, ''),
        maxpriorityfeepergas: jspb.Message.getFieldWithDefault(msg, 14, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.TransactionEvent.EthTransaction}
 */
proto.network.forta.TransactionEvent.EthTransaction.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.TransactionEvent.EthTransaction()
  return proto.network.forta.TransactionEvent.EthTransaction.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.TransactionEvent.EthTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.TransactionEvent.EthTransaction}
 */
proto.network.forta.TransactionEvent.EthTransaction.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setType(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setNonce(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setGasprice(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setGas(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setValue(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setInput(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setV(value)
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.setR(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setS(value)
        break
      case 10:
        var value = /** @type {string} */ (reader.readString())
        msg.setTo(value)
        break
      case 11:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 12:
        var value = /** @type {string} */ (reader.readString())
        msg.setFrom(value)
        break
      case 13:
        var value = /** @type {string} */ (reader.readString())
        msg.setMaxfeepergas(value)
        break
      case 14:
        var value = /** @type {string} */ (reader.readString())
        msg.setMaxpriorityfeepergas(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.TransactionEvent.EthTransaction.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.TransactionEvent.EthTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.TransactionEvent.EthTransaction.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getType()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getNonce()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getGasprice()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getGas()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getValue()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getInput()
  if (f.length > 0) {
    writer.writeString(6, f)
  }
  f = message.getV()
  if (f.length > 0) {
    writer.writeString(7, f)
  }
  f = message.getR()
  if (f.length > 0) {
    writer.writeString(8, f)
  }
  f = message.getS()
  if (f.length > 0) {
    writer.writeString(9, f)
  }
  f = message.getTo()
  if (f.length > 0) {
    writer.writeString(10, f)
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(11, f)
  }
  f = message.getFrom()
  if (f.length > 0) {
    writer.writeString(12, f)
  }
  f = message.getMaxfeepergas()
  if (f.length > 0) {
    writer.writeString(13, f)
  }
  f = message.getMaxpriorityfeepergas()
  if (f.length > 0) {
    writer.writeString(14, f)
  }
}

/**
 * optional string type = 1;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getType = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setType = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getNonce = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setNonce = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string gasPrice = 3;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getGasprice = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setGasprice = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string gas = 4;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getGas = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setGas = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string value = 5;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setValue = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string input = 6;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getInput = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setInput = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * optional string v = 7;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getV = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setV = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * optional string r = 8;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getR = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setR = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value)
}

/**
 * optional string s = 9;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getS = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setS = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value)
}

/**
 * optional string to = 10;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getTo = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setTo = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value)
}

/**
 * optional string hash = 11;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setHash = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value)
}

/**
 * optional string from = 12;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getFrom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setFrom = function (value) {
  return jspb.Message.setProto3StringField(this, 12, value)
}

/**
 * optional string maxFeePerGas = 13;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getMaxfeepergas = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setMaxfeepergas = function (value) {
  return jspb.Message.setProto3StringField(this, 13, value)
}

/**
 * optional string maxPriorityFeePerGas = 14;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.getMaxpriorityfeepergas = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthTransaction} returns this
 */
proto.network.forta.TransactionEvent.EthTransaction.prototype.setMaxpriorityfeepergas = function (value) {
  return jspb.Message.setProto3StringField(this, 14, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.TransactionEvent.Log.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.TransactionEvent.Log.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.TransactionEvent.Log.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.TransactionEvent.Log} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.TransactionEvent.Log.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        address: jspb.Message.getFieldWithDefault(msg, 1, ''),
        topicsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
        data: jspb.Message.getFieldWithDefault(msg, 3, ''),
        blocknumber: jspb.Message.getFieldWithDefault(msg, 4, ''),
        transactionhash: jspb.Message.getFieldWithDefault(msg, 5, ''),
        transactionindex: jspb.Message.getFieldWithDefault(msg, 6, ''),
        blockhash: jspb.Message.getFieldWithDefault(msg, 7, ''),
        logindex: jspb.Message.getFieldWithDefault(msg, 8, ''),
        removed: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.TransactionEvent.Log}
 */
proto.network.forta.TransactionEvent.Log.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.TransactionEvent.Log()
  return proto.network.forta.TransactionEvent.Log.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.TransactionEvent.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.TransactionEvent.Log}
 */
proto.network.forta.TransactionEvent.Log.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddress(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.addTopics(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setData(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlocknumber(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setTransactionhash(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setTransactionindex(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlockhash(value)
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.setLogindex(value)
        break
      case 9:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setRemoved(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.TransactionEvent.Log.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.TransactionEvent.Log.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.TransactionEvent.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.TransactionEvent.Log.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAddress()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getTopicsList()
  if (f.length > 0) {
    writer.writeRepeatedString(2, f)
  }
  f = message.getData()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getBlocknumber()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getTransactionhash()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getTransactionindex()
  if (f.length > 0) {
    writer.writeString(6, f)
  }
  f = message.getBlockhash()
  if (f.length > 0) {
    writer.writeString(7, f)
  }
  f = message.getLogindex()
  if (f.length > 0) {
    writer.writeString(8, f)
  }
  f = message.getRemoved()
  if (f) {
    writer.writeBool(9, f)
  }
}

/**
 * optional string address = 1;
 * @return {string}
 */
proto.network.forta.TransactionEvent.Log.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.Log} returns this
 */
proto.network.forta.TransactionEvent.Log.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * repeated string topics = 2;
 * @return {!Array<string>}
 */
proto.network.forta.TransactionEvent.Log.prototype.getTopicsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.TransactionEvent.Log} returns this
 */
proto.network.forta.TransactionEvent.Log.prototype.setTopicsList = function (value) {
  return jspb.Message.setField(this, 2, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.TransactionEvent.Log} returns this
 */
proto.network.forta.TransactionEvent.Log.prototype.addTopics = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.TransactionEvent.Log} returns this
 */
proto.network.forta.TransactionEvent.Log.prototype.clearTopicsList = function () {
  return this.setTopicsList([])
}

/**
 * optional string data = 3;
 * @return {string}
 */
proto.network.forta.TransactionEvent.Log.prototype.getData = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.Log} returns this
 */
proto.network.forta.TransactionEvent.Log.prototype.setData = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string blockNumber = 4;
 * @return {string}
 */
proto.network.forta.TransactionEvent.Log.prototype.getBlocknumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.Log} returns this
 */
proto.network.forta.TransactionEvent.Log.prototype.setBlocknumber = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string transactionHash = 5;
 * @return {string}
 */
proto.network.forta.TransactionEvent.Log.prototype.getTransactionhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.Log} returns this
 */
proto.network.forta.TransactionEvent.Log.prototype.setTransactionhash = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string transactionIndex = 6;
 * @return {string}
 */
proto.network.forta.TransactionEvent.Log.prototype.getTransactionindex = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.Log} returns this
 */
proto.network.forta.TransactionEvent.Log.prototype.setTransactionindex = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * optional string blockHash = 7;
 * @return {string}
 */
proto.network.forta.TransactionEvent.Log.prototype.getBlockhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.Log} returns this
 */
proto.network.forta.TransactionEvent.Log.prototype.setBlockhash = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * optional string logIndex = 8;
 * @return {string}
 */
proto.network.forta.TransactionEvent.Log.prototype.getLogindex = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.Log} returns this
 */
proto.network.forta.TransactionEvent.Log.prototype.setLogindex = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value)
}

/**
 * optional bool removed = 9;
 * @return {boolean}
 */
proto.network.forta.TransactionEvent.Log.prototype.getRemoved = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false))
}

/**
 * @param {boolean} value
 * @return {!proto.network.forta.TransactionEvent.Log} returns this
 */
proto.network.forta.TransactionEvent.Log.prototype.setRemoved = function (value) {
  return jspb.Message.setProto3BooleanField(this, 9, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.TransactionEvent.EthReceipt.repeatedFields_ = [5]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.TransactionEvent.EthReceipt.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.TransactionEvent.EthReceipt.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.TransactionEvent.EthReceipt} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.TransactionEvent.EthReceipt.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        root: jspb.Message.getFieldWithDefault(msg, 1, ''),
        status: jspb.Message.getFieldWithDefault(msg, 2, ''),
        cumulativegasused: jspb.Message.getFieldWithDefault(msg, 3, ''),
        logsbloom: jspb.Message.getFieldWithDefault(msg, 4, ''),
        logsList: jspb.Message.toObjectList(
          msg.getLogsList(),
          proto.network.forta.TransactionEvent.Log.toObject,
          includeInstance,
        ),
        transactionhash: jspb.Message.getFieldWithDefault(msg, 6, ''),
        contractaddress: jspb.Message.getFieldWithDefault(msg, 7, ''),
        gasused: jspb.Message.getFieldWithDefault(msg, 8, ''),
        blockhash: jspb.Message.getFieldWithDefault(msg, 9, ''),
        blocknumber: jspb.Message.getFieldWithDefault(msg, 10, ''),
        transactionindex: jspb.Message.getFieldWithDefault(msg, 11, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.TransactionEvent.EthReceipt}
 */
proto.network.forta.TransactionEvent.EthReceipt.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.TransactionEvent.EthReceipt()
  return proto.network.forta.TransactionEvent.EthReceipt.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.TransactionEvent.EthReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.TransactionEvent.EthReceipt}
 */
proto.network.forta.TransactionEvent.EthReceipt.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setRoot(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setStatus(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setCumulativegasused(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setLogsbloom(value)
        break
      case 5:
        var value = new proto.network.forta.TransactionEvent.Log()
        reader.readMessage(value, proto.network.forta.TransactionEvent.Log.deserializeBinaryFromReader)
        msg.addLogs(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setTransactionhash(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setContractaddress(value)
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.setGasused(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlockhash(value)
        break
      case 10:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlocknumber(value)
        break
      case 11:
        var value = /** @type {string} */ (reader.readString())
        msg.setTransactionindex(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.TransactionEvent.EthReceipt.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.TransactionEvent.EthReceipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.TransactionEvent.EthReceipt.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getRoot()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getStatus()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getCumulativegasused()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getLogsbloom()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getLogsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(5, f, proto.network.forta.TransactionEvent.Log.serializeBinaryToWriter)
  }
  f = message.getTransactionhash()
  if (f.length > 0) {
    writer.writeString(6, f)
  }
  f = message.getContractaddress()
  if (f.length > 0) {
    writer.writeString(7, f)
  }
  f = message.getGasused()
  if (f.length > 0) {
    writer.writeString(8, f)
  }
  f = message.getBlockhash()
  if (f.length > 0) {
    writer.writeString(9, f)
  }
  f = message.getBlocknumber()
  if (f.length > 0) {
    writer.writeString(10, f)
  }
  f = message.getTransactionindex()
  if (f.length > 0) {
    writer.writeString(11, f)
  }
}

/**
 * optional string root = 1;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.getRoot = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthReceipt} returns this
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.setRoot = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string status = 2;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.getStatus = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthReceipt} returns this
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.setStatus = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string cumulativeGasUsed = 3;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.getCumulativegasused = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthReceipt} returns this
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.setCumulativegasused = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string logsBloom = 4;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.getLogsbloom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthReceipt} returns this
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.setLogsbloom = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * repeated Log logs = 5;
 * @return {!Array<!proto.network.forta.TransactionEvent.Log>}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.getLogsList = function () {
  return /** @type{!Array<!proto.network.forta.TransactionEvent.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.TransactionEvent.Log, 5)
  )
}

/**
 * @param {!Array<!proto.network.forta.TransactionEvent.Log>} value
 * @return {!proto.network.forta.TransactionEvent.EthReceipt} returns this
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.setLogsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value)
}

/**
 * @param {!proto.network.forta.TransactionEvent.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.TransactionEvent.Log}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.addLogs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.network.forta.TransactionEvent.Log, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.TransactionEvent.EthReceipt} returns this
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.clearLogsList = function () {
  return this.setLogsList([])
}

/**
 * optional string transactionHash = 6;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.getTransactionhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthReceipt} returns this
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.setTransactionhash = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * optional string contractAddress = 7;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.getContractaddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthReceipt} returns this
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.setContractaddress = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * optional string gasUsed = 8;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.getGasused = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthReceipt} returns this
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.setGasused = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value)
}

/**
 * optional string blockHash = 9;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.getBlockhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthReceipt} returns this
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.setBlockhash = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value)
}

/**
 * optional string blockNumber = 10;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.getBlocknumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthReceipt} returns this
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.setBlocknumber = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value)
}

/**
 * optional string transactionIndex = 11;
 * @return {string}
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.getTransactionindex = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.EthReceipt} returns this
 */
proto.network.forta.TransactionEvent.EthReceipt.prototype.setTransactionindex = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.TransactionEvent.TraceAction.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.TransactionEvent.TraceAction.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.TransactionEvent.TraceAction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.TransactionEvent.TraceAction.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        calltype: jspb.Message.getFieldWithDefault(msg, 1, ''),
        to: jspb.Message.getFieldWithDefault(msg, 2, ''),
        input: jspb.Message.getFieldWithDefault(msg, 3, ''),
        from: jspb.Message.getFieldWithDefault(msg, 4, ''),
        value: jspb.Message.getFieldWithDefault(msg, 5, ''),
        init: jspb.Message.getFieldWithDefault(msg, 6, ''),
        address: jspb.Message.getFieldWithDefault(msg, 7, ''),
        balance: jspb.Message.getFieldWithDefault(msg, 8, ''),
        refundaddress: jspb.Message.getFieldWithDefault(msg, 9, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.TransactionEvent.TraceAction}
 */
proto.network.forta.TransactionEvent.TraceAction.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.TransactionEvent.TraceAction()
  return proto.network.forta.TransactionEvent.TraceAction.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.TransactionEvent.TraceAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.TransactionEvent.TraceAction}
 */
proto.network.forta.TransactionEvent.TraceAction.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setCalltype(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setTo(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setInput(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setFrom(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setValue(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setInit(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddress(value)
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.setBalance(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setRefundaddress(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.TransactionEvent.TraceAction.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.TransactionEvent.TraceAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.TransactionEvent.TraceAction.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getCalltype()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getTo()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getInput()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getFrom()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getValue()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getInit()
  if (f.length > 0) {
    writer.writeString(6, f)
  }
  f = message.getAddress()
  if (f.length > 0) {
    writer.writeString(7, f)
  }
  f = message.getBalance()
  if (f.length > 0) {
    writer.writeString(8, f)
  }
  f = message.getRefundaddress()
  if (f.length > 0) {
    writer.writeString(9, f)
  }
}

/**
 * optional string callType = 1;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.getCalltype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceAction} returns this
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.setCalltype = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string to = 2;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.getTo = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceAction} returns this
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.setTo = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string input = 3;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.getInput = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceAction} returns this
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.setInput = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string from = 4;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.getFrom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceAction} returns this
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.setFrom = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string value = 5;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.getValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceAction} returns this
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.setValue = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string init = 6;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.getInit = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceAction} returns this
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.setInit = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * optional string address = 7;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceAction} returns this
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * optional string balance = 8;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.getBalance = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceAction} returns this
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.setBalance = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value)
}

/**
 * optional string refundAddress = 9;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.getRefundaddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceAction} returns this
 */
proto.network.forta.TransactionEvent.TraceAction.prototype.setRefundaddress = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.TransactionEvent.TraceResult.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.TransactionEvent.TraceResult.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.TransactionEvent.TraceResult} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.TransactionEvent.TraceResult.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        gasused: jspb.Message.getFieldWithDefault(msg, 1, ''),
        address: jspb.Message.getFieldWithDefault(msg, 2, ''),
        code: jspb.Message.getFieldWithDefault(msg, 3, ''),
        output: jspb.Message.getFieldWithDefault(msg, 4, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.TransactionEvent.TraceResult}
 */
proto.network.forta.TransactionEvent.TraceResult.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.TransactionEvent.TraceResult()
  return proto.network.forta.TransactionEvent.TraceResult.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.TransactionEvent.TraceResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.TransactionEvent.TraceResult}
 */
proto.network.forta.TransactionEvent.TraceResult.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setGasused(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setAddress(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setCode(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setOutput(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.TransactionEvent.TraceResult.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.TransactionEvent.TraceResult.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.TransactionEvent.TraceResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.TransactionEvent.TraceResult.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getGasused()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getAddress()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getCode()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getOutput()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
}

/**
 * optional string gasUsed = 1;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceResult.prototype.getGasused = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceResult} returns this
 */
proto.network.forta.TransactionEvent.TraceResult.prototype.setGasused = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string address = 2;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceResult.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceResult} returns this
 */
proto.network.forta.TransactionEvent.TraceResult.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string code = 3;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceResult.prototype.getCode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceResult} returns this
 */
proto.network.forta.TransactionEvent.TraceResult.prototype.setCode = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string output = 4;
 * @return {string}
 */
proto.network.forta.TransactionEvent.TraceResult.prototype.getOutput = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.TraceResult} returns this
 */
proto.network.forta.TransactionEvent.TraceResult.prototype.setOutput = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.TransactionEvent.Trace.repeatedFields_ = [6]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.TransactionEvent.Trace.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.TransactionEvent.Trace.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.TransactionEvent.Trace} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.TransactionEvent.Trace.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        action: (f = msg.getAction()) && proto.network.forta.TransactionEvent.TraceAction.toObject(includeInstance, f),
        blockhash: jspb.Message.getFieldWithDefault(msg, 2, ''),
        blocknumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
        result: (f = msg.getResult()) && proto.network.forta.TransactionEvent.TraceResult.toObject(includeInstance, f),
        subtraces: jspb.Message.getFieldWithDefault(msg, 5, 0),
        traceaddressList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
        transactionhash: jspb.Message.getFieldWithDefault(msg, 7, ''),
        transactionposition: jspb.Message.getFieldWithDefault(msg, 8, 0),
        type: jspb.Message.getFieldWithDefault(msg, 9, ''),
        error: jspb.Message.getFieldWithDefault(msg, 10, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.TransactionEvent.Trace}
 */
proto.network.forta.TransactionEvent.Trace.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.TransactionEvent.Trace()
  return proto.network.forta.TransactionEvent.Trace.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.TransactionEvent.Trace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.TransactionEvent.Trace}
 */
proto.network.forta.TransactionEvent.Trace.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.network.forta.TransactionEvent.TraceAction()
        reader.readMessage(value, proto.network.forta.TransactionEvent.TraceAction.deserializeBinaryFromReader)
        msg.setAction(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setBlockhash(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setBlocknumber(value)
        break
      case 4:
        var value = new proto.network.forta.TransactionEvent.TraceResult()
        reader.readMessage(value, proto.network.forta.TransactionEvent.TraceResult.deserializeBinaryFromReader)
        msg.setResult(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setSubtraces(value)
        break
      case 6:
        var values = /** @type {!Array<number>} */ (
          reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]
        )
        for (var i = 0; i < values.length; i++) {
          msg.addTraceaddress(values[i])
        }
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setTransactionhash(value)
        break
      case 8:
        var value = /** @type {number} */ (reader.readInt64())
        msg.setTransactionposition(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setType(value)
        break
      case 10:
        var value = /** @type {string} */ (reader.readString())
        msg.setError(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.TransactionEvent.Trace.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.TransactionEvent.Trace.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.TransactionEvent.Trace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.TransactionEvent.Trace.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAction()
  if (f != null) {
    writer.writeMessage(1, f, proto.network.forta.TransactionEvent.TraceAction.serializeBinaryToWriter)
  }
  f = message.getBlockhash()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getBlocknumber()
  if (f !== 0) {
    writer.writeInt64(3, f)
  }
  f = message.getResult()
  if (f != null) {
    writer.writeMessage(4, f, proto.network.forta.TransactionEvent.TraceResult.serializeBinaryToWriter)
  }
  f = message.getSubtraces()
  if (f !== 0) {
    writer.writeInt64(5, f)
  }
  f = message.getTraceaddressList()
  if (f.length > 0) {
    writer.writePackedInt64(6, f)
  }
  f = message.getTransactionhash()
  if (f.length > 0) {
    writer.writeString(7, f)
  }
  f = message.getTransactionposition()
  if (f !== 0) {
    writer.writeInt64(8, f)
  }
  f = message.getType()
  if (f.length > 0) {
    writer.writeString(9, f)
  }
  f = message.getError()
  if (f.length > 0) {
    writer.writeString(10, f)
  }
}

/**
 * optional TraceAction action = 1;
 * @return {?proto.network.forta.TransactionEvent.TraceAction}
 */
proto.network.forta.TransactionEvent.Trace.prototype.getAction = function () {
  return /** @type{?proto.network.forta.TransactionEvent.TraceAction} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.TransactionEvent.TraceAction, 1)
  )
}

/**
 * @param {?proto.network.forta.TransactionEvent.TraceAction|undefined} value
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.setAction = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.clearAction = function () {
  return this.setAction(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.TransactionEvent.Trace.prototype.hasAction = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional string blockHash = 2;
 * @return {string}
 */
proto.network.forta.TransactionEvent.Trace.prototype.getBlockhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.setBlockhash = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional int64 blockNumber = 3;
 * @return {number}
 */
proto.network.forta.TransactionEvent.Trace.prototype.getBlocknumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.setBlocknumber = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional TraceResult result = 4;
 * @return {?proto.network.forta.TransactionEvent.TraceResult}
 */
proto.network.forta.TransactionEvent.Trace.prototype.getResult = function () {
  return /** @type{?proto.network.forta.TransactionEvent.TraceResult} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.TransactionEvent.TraceResult, 4)
  )
}

/**
 * @param {?proto.network.forta.TransactionEvent.TraceResult|undefined} value
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.setResult = function (value) {
  return jspb.Message.setWrapperField(this, 4, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.clearResult = function () {
  return this.setResult(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.TransactionEvent.Trace.prototype.hasResult = function () {
  return jspb.Message.getField(this, 4) != null
}

/**
 * optional int64 subtraces = 5;
 * @return {number}
 */
proto.network.forta.TransactionEvent.Trace.prototype.getSubtraces = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.setSubtraces = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value)
}

/**
 * repeated int64 traceAddress = 6;
 * @return {!Array<number>}
 */
proto.network.forta.TransactionEvent.Trace.prototype.getTraceaddressList = function () {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6))
}

/**
 * @param {!Array<number>} value
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.setTraceaddressList = function (value) {
  return jspb.Message.setField(this, 6, value || [])
}

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.addTraceaddress = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.clearTraceaddressList = function () {
  return this.setTraceaddressList([])
}

/**
 * optional string transactionHash = 7;
 * @return {string}
 */
proto.network.forta.TransactionEvent.Trace.prototype.getTransactionhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.setTransactionhash = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * optional int64 transactionPosition = 8;
 * @return {number}
 */
proto.network.forta.TransactionEvent.Trace.prototype.getTransactionposition = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.setTransactionposition = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value)
}

/**
 * optional string type = 9;
 * @return {string}
 */
proto.network.forta.TransactionEvent.Trace.prototype.getType = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.setType = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value)
}

/**
 * optional string error = 10;
 * @return {string}
 */
proto.network.forta.TransactionEvent.Trace.prototype.getError = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent.Trace} returns this
 */
proto.network.forta.TransactionEvent.Trace.prototype.setError = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value)
}

/**
 * optional EventType type = 1;
 * @return {!proto.network.forta.TransactionEvent.EventType}
 */
proto.network.forta.TransactionEvent.prototype.getType = function () {
  return /** @type {!proto.network.forta.TransactionEvent.EventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {!proto.network.forta.TransactionEvent.EventType} value
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * optional EthTransaction transaction = 2;
 * @return {?proto.network.forta.TransactionEvent.EthTransaction}
 */
proto.network.forta.TransactionEvent.prototype.getTransaction = function () {
  return /** @type{?proto.network.forta.TransactionEvent.EthTransaction} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.TransactionEvent.EthTransaction, 2)
  )
}

/**
 * @param {?proto.network.forta.TransactionEvent.EthTransaction|undefined} value
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.setTransaction = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.clearTransaction = function () {
  return this.setTransaction(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.TransactionEvent.prototype.hasTransaction = function () {
  return jspb.Message.getField(this, 2) != null
}

/**
 * optional EthReceipt receipt = 3;
 * @return {?proto.network.forta.TransactionEvent.EthReceipt}
 */
proto.network.forta.TransactionEvent.prototype.getReceipt = function () {
  return /** @type{?proto.network.forta.TransactionEvent.EthReceipt} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.TransactionEvent.EthReceipt, 3)
  )
}

/**
 * @param {?proto.network.forta.TransactionEvent.EthReceipt|undefined} value
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.setReceipt = function (value) {
  return jspb.Message.setWrapperField(this, 3, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.clearReceipt = function () {
  return this.setReceipt(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.TransactionEvent.prototype.hasReceipt = function () {
  return jspb.Message.getField(this, 3) != null
}

/**
 * optional Network network = 4;
 * @return {?proto.network.forta.TransactionEvent.Network}
 */
proto.network.forta.TransactionEvent.prototype.getNetwork = function () {
  return /** @type{?proto.network.forta.TransactionEvent.Network} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.TransactionEvent.Network, 4)
  )
}

/**
 * @param {?proto.network.forta.TransactionEvent.Network|undefined} value
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.setNetwork = function (value) {
  return jspb.Message.setWrapperField(this, 4, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.clearNetwork = function () {
  return this.setNetwork(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.TransactionEvent.prototype.hasNetwork = function () {
  return jspb.Message.getField(this, 4) != null
}

/**
 * repeated Trace traces = 5;
 * @return {!Array<!proto.network.forta.TransactionEvent.Trace>}
 */
proto.network.forta.TransactionEvent.prototype.getTracesList = function () {
  return /** @type{!Array<!proto.network.forta.TransactionEvent.Trace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.TransactionEvent.Trace, 5)
  )
}

/**
 * @param {!Array<!proto.network.forta.TransactionEvent.Trace>} value
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.setTracesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value)
}

/**
 * @param {!proto.network.forta.TransactionEvent.Trace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.TransactionEvent.Trace}
 */
proto.network.forta.TransactionEvent.prototype.addTraces = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    5,
    opt_value,
    proto.network.forta.TransactionEvent.Trace,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.clearTracesList = function () {
  return this.setTracesList([])
}

/**
 * map<string, bool> addresses = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.network.forta.TransactionEvent.prototype.getAddressesMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (jspb.Message.getMapField(this, 6, opt_noLazyCreate, null))
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.clearAddressesMap = function () {
  this.getAddressesMap().clear()
  return this
}

/**
 * optional EthBlock block = 7;
 * @return {?proto.network.forta.TransactionEvent.EthBlock}
 */
proto.network.forta.TransactionEvent.prototype.getBlock = function () {
  return /** @type{?proto.network.forta.TransactionEvent.EthBlock} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.TransactionEvent.EthBlock, 7)
  )
}

/**
 * @param {?proto.network.forta.TransactionEvent.EthBlock|undefined} value
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.setBlock = function (value) {
  return jspb.Message.setWrapperField(this, 7, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.clearBlock = function () {
  return this.setBlock(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.TransactionEvent.prototype.hasBlock = function () {
  return jspb.Message.getField(this, 7) != null
}

/**
 * repeated Log logs = 8;
 * @return {!Array<!proto.network.forta.TransactionEvent.Log>}
 */
proto.network.forta.TransactionEvent.prototype.getLogsList = function () {
  return /** @type{!Array<!proto.network.forta.TransactionEvent.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.TransactionEvent.Log, 8)
  )
}

/**
 * @param {!Array<!proto.network.forta.TransactionEvent.Log>} value
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.setLogsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value)
}

/**
 * @param {!proto.network.forta.TransactionEvent.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.TransactionEvent.Log}
 */
proto.network.forta.TransactionEvent.prototype.addLogs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.network.forta.TransactionEvent.Log, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.clearLogsList = function () {
  return this.setLogsList([])
}

/**
 * optional bool isContractDeployment = 9;
 * @return {boolean}
 */
proto.network.forta.TransactionEvent.prototype.getIscontractdeployment = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false))
}

/**
 * @param {boolean} value
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.setIscontractdeployment = function (value) {
  return jspb.Message.setProto3BooleanField(this, 9, value)
}

/**
 * optional string contractAddress = 10;
 * @return {string}
 */
proto.network.forta.TransactionEvent.prototype.getContractaddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.setContractaddress = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value)
}

/**
 * optional TrackingTimestamps timestamps = 11;
 * @return {?proto.network.forta.TrackingTimestamps}
 */
proto.network.forta.TransactionEvent.prototype.getTimestamps = function () {
  return /** @type{?proto.network.forta.TrackingTimestamps} */ (
    jspb.Message.getWrapperField(this, alert_pb.TrackingTimestamps, 11)
  )
}

/**
 * @param {?proto.network.forta.TrackingTimestamps|undefined} value
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.setTimestamps = function (value) {
  return jspb.Message.setWrapperField(this, 11, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.clearTimestamps = function () {
  return this.setTimestamps(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.TransactionEvent.prototype.hasTimestamps = function () {
  return jspb.Message.getField(this, 11) != null
}

/**
 * map<string, bool> txAddresses = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.network.forta.TransactionEvent.prototype.getTxaddressesMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (jspb.Message.getMapField(this, 12, opt_noLazyCreate, null))
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.network.forta.TransactionEvent} returns this
 */
proto.network.forta.TransactionEvent.prototype.clearTxaddressesMap = function () {
  this.getTxaddressesMap().clear()
  return this
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.AlertEvent.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.AlertEvent.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.AlertEvent} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.AlertEvent.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        alert: (f = msg.getAlert()) && proto.network.forta.AlertEvent.Alert.toObject(includeInstance, f),
        timestamps: (f = msg.getTimestamps()) && alert_pb.TrackingTimestamps.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.AlertEvent}
 */
proto.network.forta.AlertEvent.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.AlertEvent()
  return proto.network.forta.AlertEvent.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.AlertEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.AlertEvent}
 */
proto.network.forta.AlertEvent.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.network.forta.AlertEvent.Alert()
        reader.readMessage(value, proto.network.forta.AlertEvent.Alert.deserializeBinaryFromReader)
        msg.setAlert(value)
        break
      case 2:
        var value = new alert_pb.TrackingTimestamps()
        reader.readMessage(value, alert_pb.TrackingTimestamps.deserializeBinaryFromReader)
        msg.setTimestamps(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.AlertEvent.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.AlertEvent.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.AlertEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.AlertEvent.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAlert()
  if (f != null) {
    writer.writeMessage(1, f, proto.network.forta.AlertEvent.Alert.serializeBinaryToWriter)
  }
  f = message.getTimestamps()
  if (f != null) {
    writer.writeMessage(2, f, alert_pb.TrackingTimestamps.serializeBinaryToWriter)
  }
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.AlertEvent.Alert.repeatedFields_ = [2, 3, 9, 14, 16]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.AlertEvent.Alert.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.AlertEvent.Alert.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.AlertEvent.Alert} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.AlertEvent.Alert.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        alertid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        addressesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
        contractsList: jspb.Message.toObjectList(
          msg.getContractsList(),
          proto.network.forta.AlertEvent.Alert.Contract.toObject,
          includeInstance,
        ),
        createdat: jspb.Message.getFieldWithDefault(msg, 4, ''),
        description: jspb.Message.getFieldWithDefault(msg, 5, ''),
        hash: jspb.Message.getFieldWithDefault(msg, 6, ''),
        metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
        name: jspb.Message.getFieldWithDefault(msg, 8, ''),
        projectsList: jspb.Message.toObjectList(
          msg.getProjectsList(),
          proto.network.forta.AlertEvent.Alert.Project.toObject,
          includeInstance,
        ),
        scannodecount: jspb.Message.getFieldWithDefault(msg, 10, 0),
        severity: jspb.Message.getFieldWithDefault(msg, 11, ''),
        source: (f = msg.getSource()) && proto.network.forta.AlertEvent.Alert.Source.toObject(includeInstance, f),
        findingtype: jspb.Message.getFieldWithDefault(msg, 13, ''),
        relatedalertsList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
        chainid: jspb.Message.getFieldWithDefault(msg, 15, 0),
        labelsList: jspb.Message.toObjectList(
          msg.getLabelsList(),
          proto.network.forta.AlertEvent.Alert.Label.toObject,
          includeInstance,
        ),
        truncated: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
        addressbloomfilter: (f = msg.getAddressbloomfilter()) && alert_pb.BloomFilter.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.AlertEvent.Alert}
 */
proto.network.forta.AlertEvent.Alert.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.AlertEvent.Alert()
  return proto.network.forta.AlertEvent.Alert.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.AlertEvent.Alert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.AlertEvent.Alert}
 */
proto.network.forta.AlertEvent.Alert.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setAlertid(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.addAddresses(value)
        break
      case 3:
        var value = new proto.network.forta.AlertEvent.Alert.Contract()
        reader.readMessage(value, proto.network.forta.AlertEvent.Alert.Contract.deserializeBinaryFromReader)
        msg.addContracts(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setCreatedat(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setDescription(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 7:
        var value = msg.getMetadataMap()
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            '',
          )
        })
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.setName(value)
        break
      case 9:
        var value = new proto.network.forta.AlertEvent.Alert.Project()
        reader.readMessage(value, proto.network.forta.AlertEvent.Alert.Project.deserializeBinaryFromReader)
        msg.addProjects(value)
        break
      case 10:
        var value = /** @type {number} */ (reader.readInt32())
        msg.setScannodecount(value)
        break
      case 11:
        var value = /** @type {string} */ (reader.readString())
        msg.setSeverity(value)
        break
      case 12:
        var value = new proto.network.forta.AlertEvent.Alert.Source()
        reader.readMessage(value, proto.network.forta.AlertEvent.Alert.Source.deserializeBinaryFromReader)
        msg.setSource(value)
        break
      case 13:
        var value = /** @type {string} */ (reader.readString())
        msg.setFindingtype(value)
        break
      case 14:
        var value = /** @type {string} */ (reader.readString())
        msg.addRelatedalerts(value)
        break
      case 15:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setChainid(value)
        break
      case 16:
        var value = new proto.network.forta.AlertEvent.Alert.Label()
        reader.readMessage(value, proto.network.forta.AlertEvent.Alert.Label.deserializeBinaryFromReader)
        msg.addLabels(value)
        break
      case 17:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setTruncated(value)
        break
      case 18:
        var value = new alert_pb.BloomFilter()
        reader.readMessage(value, alert_pb.BloomFilter.deserializeBinaryFromReader)
        msg.setAddressbloomfilter(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.AlertEvent.Alert.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.AlertEvent.Alert.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.AlertEvent.Alert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.AlertEvent.Alert.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getAlertid()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getAddressesList()
  if (f.length > 0) {
    writer.writeRepeatedString(2, f)
  }
  f = message.getContractsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, proto.network.forta.AlertEvent.Alert.Contract.serializeBinaryToWriter)
  }
  f = message.getCreatedat()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getDescription()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(6, f)
  }
  f = message.getMetadataMap(true)
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString)
  }
  f = message.getName()
  if (f.length > 0) {
    writer.writeString(8, f)
  }
  f = message.getProjectsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(9, f, proto.network.forta.AlertEvent.Alert.Project.serializeBinaryToWriter)
  }
  f = message.getScannodecount()
  if (f !== 0) {
    writer.writeInt32(10, f)
  }
  f = message.getSeverity()
  if (f.length > 0) {
    writer.writeString(11, f)
  }
  f = message.getSource()
  if (f != null) {
    writer.writeMessage(12, f, proto.network.forta.AlertEvent.Alert.Source.serializeBinaryToWriter)
  }
  f = message.getFindingtype()
  if (f.length > 0) {
    writer.writeString(13, f)
  }
  f = message.getRelatedalertsList()
  if (f.length > 0) {
    writer.writeRepeatedString(14, f)
  }
  f = message.getChainid()
  if (f !== 0) {
    writer.writeUint64(15, f)
  }
  f = message.getLabelsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(16, f, proto.network.forta.AlertEvent.Alert.Label.serializeBinaryToWriter)
  }
  f = message.getTruncated()
  if (f) {
    writer.writeBool(17, f)
  }
  f = message.getAddressbloomfilter()
  if (f != null) {
    writer.writeMessage(18, f, alert_pb.BloomFilter.serializeBinaryToWriter)
  }
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.AlertEvent.Alert.Contract.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.AlertEvent.Alert.Contract.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.AlertEvent.Alert.Contract} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.AlertEvent.Alert.Contract.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ''),
        projectid: jspb.Message.getFieldWithDefault(msg, 2, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.AlertEvent.Alert.Contract}
 */
proto.network.forta.AlertEvent.Alert.Contract.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.AlertEvent.Alert.Contract()
  return proto.network.forta.AlertEvent.Alert.Contract.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.AlertEvent.Alert.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.AlertEvent.Alert.Contract}
 */
proto.network.forta.AlertEvent.Alert.Contract.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setName(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setProjectid(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.AlertEvent.Alert.Contract.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.AlertEvent.Alert.Contract.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.AlertEvent.Alert.Contract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.AlertEvent.Alert.Contract.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getName()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getProjectid()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
}

/**
 * optional string name = 1;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Contract.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Contract} returns this
 */
proto.network.forta.AlertEvent.Alert.Contract.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string projectId = 2;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Contract.prototype.getProjectid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Contract} returns this
 */
proto.network.forta.AlertEvent.Alert.Contract.prototype.setProjectid = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.AlertEvent.Alert.Project.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.AlertEvent.Alert.Project.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.AlertEvent.Alert.Project} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.AlertEvent.Alert.Project.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.AlertEvent.Alert.Project}
 */
proto.network.forta.AlertEvent.Alert.Project.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.AlertEvent.Alert.Project()
  return proto.network.forta.AlertEvent.Alert.Project.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.AlertEvent.Alert.Project} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.AlertEvent.Alert.Project}
 */
proto.network.forta.AlertEvent.Alert.Project.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.AlertEvent.Alert.Project.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.AlertEvent.Alert.Project.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.AlertEvent.Alert.Project} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.AlertEvent.Alert.Project.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getId()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Project.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Project} returns this
 */
proto.network.forta.AlertEvent.Alert.Project.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.AlertEvent.Alert.Block.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.AlertEvent.Alert.Block.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.AlertEvent.Alert.Block} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.AlertEvent.Alert.Block.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        number: jspb.Message.getFieldWithDefault(msg, 1, 0),
        hash: jspb.Message.getFieldWithDefault(msg, 2, ''),
        timestamp: jspb.Message.getFieldWithDefault(msg, 3, ''),
        chainid: jspb.Message.getFieldWithDefault(msg, 4, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.AlertEvent.Alert.Block}
 */
proto.network.forta.AlertEvent.Alert.Block.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.AlertEvent.Alert.Block()
  return proto.network.forta.AlertEvent.Alert.Block.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.AlertEvent.Alert.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.AlertEvent.Alert.Block}
 */
proto.network.forta.AlertEvent.Alert.Block.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setNumber(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setTimestamp(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setChainid(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.AlertEvent.Alert.Block.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.AlertEvent.Alert.Block.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.AlertEvent.Alert.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.AlertEvent.Alert.Block.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getNumber()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getTimestamp()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getChainid()
  if (f !== 0) {
    writer.writeUint64(4, f)
  }
}

/**
 * optional uint64 number = 1;
 * @return {number}
 */
proto.network.forta.AlertEvent.Alert.Block.prototype.getNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.AlertEvent.Alert.Block} returns this
 */
proto.network.forta.AlertEvent.Alert.Block.prototype.setNumber = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional string hash = 2;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Block.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Block} returns this
 */
proto.network.forta.AlertEvent.Alert.Block.prototype.setHash = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Block.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Block} returns this
 */
proto.network.forta.AlertEvent.Alert.Block.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional uint64 chainId = 4;
 * @return {number}
 */
proto.network.forta.AlertEvent.Alert.Block.prototype.getChainid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.AlertEvent.Alert.Block} returns this
 */
proto.network.forta.AlertEvent.Alert.Block.prototype.setChainid = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.AlertEvent.Alert.Bot.repeatedFields_ = [1, 12, 13]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.AlertEvent.Alert.Bot.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.AlertEvent.Alert.Bot.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.AlertEvent.Alert.Bot} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.AlertEvent.Alert.Bot.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        chainidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
        createdat: jspb.Message.getFieldWithDefault(msg, 2, ''),
        description: jspb.Message.getFieldWithDefault(msg, 3, ''),
        developer: jspb.Message.getFieldWithDefault(msg, 4, ''),
        docreference: jspb.Message.getFieldWithDefault(msg, 5, ''),
        enabled: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
        id: jspb.Message.getFieldWithDefault(msg, 7, ''),
        image: jspb.Message.getFieldWithDefault(msg, 8, ''),
        name: jspb.Message.getFieldWithDefault(msg, 9, ''),
        reference: jspb.Message.getFieldWithDefault(msg, 10, ''),
        repository: jspb.Message.getFieldWithDefault(msg, 11, ''),
        projectsList: (f = jspb.Message.getRepeatedField(msg, 12)) == null ? undefined : f,
        scannodesList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
        version: jspb.Message.getFieldWithDefault(msg, 14, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.AlertEvent.Alert.Bot}
 */
proto.network.forta.AlertEvent.Alert.Bot.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.AlertEvent.Alert.Bot()
  return proto.network.forta.AlertEvent.Alert.Bot.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.AlertEvent.Alert.Bot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.AlertEvent.Alert.Bot}
 */
proto.network.forta.AlertEvent.Alert.Bot.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.addChainids(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setCreatedat(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setDescription(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setDeveloper(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setDocreference(value)
        break
      case 6:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setEnabled(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setId(value)
        break
      case 8:
        var value = /** @type {string} */ (reader.readString())
        msg.setImage(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setName(value)
        break
      case 10:
        var value = /** @type {string} */ (reader.readString())
        msg.setReference(value)
        break
      case 11:
        var value = /** @type {string} */ (reader.readString())
        msg.setRepository(value)
        break
      case 12:
        var value = /** @type {string} */ (reader.readString())
        msg.addProjects(value)
        break
      case 13:
        var value = /** @type {string} */ (reader.readString())
        msg.addScannodes(value)
        break
      case 14:
        var value = /** @type {string} */ (reader.readString())
        msg.setVersion(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.AlertEvent.Alert.Bot.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.AlertEvent.Alert.Bot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.AlertEvent.Alert.Bot.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getChainidsList()
  if (f.length > 0) {
    writer.writeRepeatedString(1, f)
  }
  f = message.getCreatedat()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getDescription()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getDeveloper()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getDocreference()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getEnabled()
  if (f) {
    writer.writeBool(6, f)
  }
  f = message.getId()
  if (f.length > 0) {
    writer.writeString(7, f)
  }
  f = message.getImage()
  if (f.length > 0) {
    writer.writeString(8, f)
  }
  f = message.getName()
  if (f.length > 0) {
    writer.writeString(9, f)
  }
  f = message.getReference()
  if (f.length > 0) {
    writer.writeString(10, f)
  }
  f = message.getRepository()
  if (f.length > 0) {
    writer.writeString(11, f)
  }
  f = message.getProjectsList()
  if (f.length > 0) {
    writer.writeRepeatedString(12, f)
  }
  f = message.getScannodesList()
  if (f.length > 0) {
    writer.writeRepeatedString(13, f)
  }
  f = message.getVersion()
  if (f.length > 0) {
    writer.writeString(14, f)
  }
}

/**
 * repeated string chainIds = 1;
 * @return {!Array<string>}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getChainidsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setChainidsList = function (value) {
  return jspb.Message.setField(this, 1, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.addChainids = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.clearChainidsList = function () {
  return this.setChainidsList([])
}

/**
 * optional string createdAt = 2;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getCreatedat = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setCreatedat = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string description = 3;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getDescription = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setDescription = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string developer = 4;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getDeveloper = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setDeveloper = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string DocReference = 5;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getDocreference = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setDocreference = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional bool enabled = 6;
 * @return {boolean}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getEnabled = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false))
}

/**
 * @param {boolean} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setEnabled = function (value) {
  return jspb.Message.setProto3BooleanField(this, 6, value)
}

/**
 * optional string id = 7;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * optional string image = 8;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getImage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setImage = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value)
}

/**
 * optional string name = 9;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value)
}

/**
 * optional string reference = 10;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getReference = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setReference = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value)
}

/**
 * optional string repository = 11;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getRepository = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setRepository = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value)
}

/**
 * repeated string projects = 12;
 * @return {!Array<string>}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getProjectsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 12))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setProjectsList = function (value) {
  return jspb.Message.setField(this, 12, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.addProjects = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.clearProjectsList = function () {
  return this.setProjectsList([])
}

/**
 * repeated string scanNodes = 13;
 * @return {!Array<string>}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getScannodesList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setScannodesList = function (value) {
  return jspb.Message.setField(this, 13, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.addScannodes = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.clearScannodesList = function () {
  return this.setScannodesList([])
}

/**
 * optional string version = 14;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.getVersion = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Bot} returns this
 */
proto.network.forta.AlertEvent.Alert.Bot.prototype.setVersion = function (value) {
  return jspb.Message.setProto3StringField(this, 14, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.AlertEvent.Alert.SourceAlertEvent.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.AlertEvent.Alert.SourceAlertEvent.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.AlertEvent.Alert.SourceAlertEvent} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.AlertEvent.Alert.SourceAlertEvent.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        botid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        hash: jspb.Message.getFieldWithDefault(msg, 2, ''),
        timestamp: jspb.Message.getFieldWithDefault(msg, 3, ''),
        chainid: jspb.Message.getFieldWithDefault(msg, 4, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.AlertEvent.Alert.SourceAlertEvent}
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.AlertEvent.Alert.SourceAlertEvent()
  return proto.network.forta.AlertEvent.Alert.SourceAlertEvent.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.AlertEvent.Alert.SourceAlertEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.AlertEvent.Alert.SourceAlertEvent}
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setBotid(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setHash(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setTimestamp(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setChainid(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.AlertEvent.Alert.SourceAlertEvent.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.AlertEvent.Alert.SourceAlertEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getBotid()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getHash()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getTimestamp()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getChainid()
  if (f !== 0) {
    writer.writeUint64(4, f)
  }
}

/**
 * optional string botId = 1;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent.prototype.getBotid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.SourceAlertEvent} returns this
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent.prototype.setBotid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string hash = 2;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.SourceAlertEvent} returns this
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent.prototype.setHash = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent.prototype.getTimestamp = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.SourceAlertEvent} returns this
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional uint64 chainId = 4;
 * @return {number}
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent.prototype.getChainid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.AlertEvent.Alert.SourceAlertEvent} returns this
 */
proto.network.forta.AlertEvent.Alert.SourceAlertEvent.prototype.setChainid = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.AlertEvent.Alert.Source.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.AlertEvent.Alert.Source.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.AlertEvent.Alert.Source} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.AlertEvent.Alert.Source.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        transactionhash: jspb.Message.getFieldWithDefault(msg, 1, ''),
        bot: (f = msg.getBot()) && proto.network.forta.AlertEvent.Alert.Bot.toObject(includeInstance, f),
        block: (f = msg.getBlock()) && proto.network.forta.AlertEvent.Alert.Block.toObject(includeInstance, f),
        sourcealert:
          (f = msg.getSourcealert()) &&
          proto.network.forta.AlertEvent.Alert.SourceAlertEvent.toObject(includeInstance, f),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.AlertEvent.Alert.Source}
 */
proto.network.forta.AlertEvent.Alert.Source.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.AlertEvent.Alert.Source()
  return proto.network.forta.AlertEvent.Alert.Source.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.AlertEvent.Alert.Source} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.AlertEvent.Alert.Source}
 */
proto.network.forta.AlertEvent.Alert.Source.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setTransactionhash(value)
        break
      case 2:
        var value = new proto.network.forta.AlertEvent.Alert.Bot()
        reader.readMessage(value, proto.network.forta.AlertEvent.Alert.Bot.deserializeBinaryFromReader)
        msg.setBot(value)
        break
      case 3:
        var value = new proto.network.forta.AlertEvent.Alert.Block()
        reader.readMessage(value, proto.network.forta.AlertEvent.Alert.Block.deserializeBinaryFromReader)
        msg.setBlock(value)
        break
      case 4:
        var value = new proto.network.forta.AlertEvent.Alert.SourceAlertEvent()
        reader.readMessage(value, proto.network.forta.AlertEvent.Alert.SourceAlertEvent.deserializeBinaryFromReader)
        msg.setSourcealert(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.AlertEvent.Alert.Source.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.AlertEvent.Alert.Source} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.AlertEvent.Alert.Source.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getTransactionhash()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getBot()
  if (f != null) {
    writer.writeMessage(2, f, proto.network.forta.AlertEvent.Alert.Bot.serializeBinaryToWriter)
  }
  f = message.getBlock()
  if (f != null) {
    writer.writeMessage(3, f, proto.network.forta.AlertEvent.Alert.Block.serializeBinaryToWriter)
  }
  f = message.getSourcealert()
  if (f != null) {
    writer.writeMessage(4, f, proto.network.forta.AlertEvent.Alert.SourceAlertEvent.serializeBinaryToWriter)
  }
}

/**
 * optional string transactionHash = 1;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.getTransactionhash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Source} returns this
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.setTransactionhash = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional Bot bot = 2;
 * @return {?proto.network.forta.AlertEvent.Alert.Bot}
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.getBot = function () {
  return /** @type{?proto.network.forta.AlertEvent.Alert.Bot} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.AlertEvent.Alert.Bot, 2)
  )
}

/**
 * @param {?proto.network.forta.AlertEvent.Alert.Bot|undefined} value
 * @return {!proto.network.forta.AlertEvent.Alert.Source} returns this
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.setBot = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.AlertEvent.Alert.Source} returns this
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.clearBot = function () {
  return this.setBot(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.hasBot = function () {
  return jspb.Message.getField(this, 2) != null
}

/**
 * optional Block block = 3;
 * @return {?proto.network.forta.AlertEvent.Alert.Block}
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.getBlock = function () {
  return /** @type{?proto.network.forta.AlertEvent.Alert.Block} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.AlertEvent.Alert.Block, 3)
  )
}

/**
 * @param {?proto.network.forta.AlertEvent.Alert.Block|undefined} value
 * @return {!proto.network.forta.AlertEvent.Alert.Source} returns this
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.setBlock = function (value) {
  return jspb.Message.setWrapperField(this, 3, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.AlertEvent.Alert.Source} returns this
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.clearBlock = function () {
  return this.setBlock(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.hasBlock = function () {
  return jspb.Message.getField(this, 3) != null
}

/**
 * optional SourceAlertEvent sourceAlert = 4;
 * @return {?proto.network.forta.AlertEvent.Alert.SourceAlertEvent}
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.getSourcealert = function () {
  return /** @type{?proto.network.forta.AlertEvent.Alert.SourceAlertEvent} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.AlertEvent.Alert.SourceAlertEvent, 4)
  )
}

/**
 * @param {?proto.network.forta.AlertEvent.Alert.SourceAlertEvent|undefined} value
 * @return {!proto.network.forta.AlertEvent.Alert.Source} returns this
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.setSourcealert = function (value) {
  return jspb.Message.setWrapperField(this, 4, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.AlertEvent.Alert.Source} returns this
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.clearSourcealert = function () {
  return this.setSourcealert(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.AlertEvent.Alert.Source.prototype.hasSourcealert = function () {
  return jspb.Message.getField(this, 4) != null
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.network.forta.AlertEvent.Alert.Label.repeatedFields_ = [6]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.network.forta.AlertEvent.Alert.Label.prototype.toObject = function (opt_includeInstance) {
    return proto.network.forta.AlertEvent.Alert.Label.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.network.forta.AlertEvent.Alert.Label} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.network.forta.AlertEvent.Alert.Label.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        label: jspb.Message.getFieldWithDefault(msg, 1, ''),
        confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
        entity: jspb.Message.getFieldWithDefault(msg, 3, ''),
        entitytype: jspb.Message.getFieldWithDefault(msg, 4, ''),
        remove: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
        metadataList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
        uniquekey: jspb.Message.getFieldWithDefault(msg, 7, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.network.forta.AlertEvent.Alert.Label}
 */
proto.network.forta.AlertEvent.Alert.Label.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.network.forta.AlertEvent.Alert.Label()
  return proto.network.forta.AlertEvent.Alert.Label.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.network.forta.AlertEvent.Alert.Label} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.network.forta.AlertEvent.Alert.Label}
 */
proto.network.forta.AlertEvent.Alert.Label.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setLabel(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setConfidence(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setEntity(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setEntitytype(value)
        break
      case 5:
        var value = /** @type {boolean} */ (reader.readBool())
        msg.setRemove(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.addMetadata(value)
        break
      case 7:
        var value = /** @type {string} */ (reader.readString())
        msg.setUniquekey(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.network.forta.AlertEvent.Alert.Label.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.network.forta.AlertEvent.Alert.Label} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.network.forta.AlertEvent.Alert.Label.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getLabel()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getConfidence()
  if (f !== 0.0) {
    writer.writeFloat(2, f)
  }
  f = message.getEntity()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getEntitytype()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getRemove()
  if (f) {
    writer.writeBool(5, f)
  }
  f = message.getMetadataList()
  if (f.length > 0) {
    writer.writeRepeatedString(6, f)
  }
  f = message.getUniquekey()
  if (f.length > 0) {
    writer.writeString(7, f)
  }
}

/**
 * optional string label = 1;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.getLabel = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Label} returns this
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.setLabel = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional float confidence = 2;
 * @return {number}
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.getConfidence = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.AlertEvent.Alert.Label} returns this
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.setConfidence = function (value) {
  return jspb.Message.setProto3FloatField(this, 2, value)
}

/**
 * optional string entity = 3;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.getEntity = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Label} returns this
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.setEntity = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string entityType = 4;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.getEntitytype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Label} returns this
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.setEntitytype = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional bool remove = 5;
 * @return {boolean}
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.getRemove = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false))
}

/**
 * @param {boolean} value
 * @return {!proto.network.forta.AlertEvent.Alert.Label} returns this
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.setRemove = function (value) {
  return jspb.Message.setProto3BooleanField(this, 5, value)
}

/**
 * repeated string metadata = 6;
 * @return {!Array<string>}
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.getMetadataList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.AlertEvent.Alert.Label} returns this
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.setMetadataList = function (value) {
  return jspb.Message.setField(this, 6, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.AlertEvent.Alert.Label} returns this
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.addMetadata = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.AlertEvent.Alert.Label} returns this
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.clearMetadataList = function () {
  return this.setMetadataList([])
}

/**
 * optional string uniqueKey = 7;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.getUniquekey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert.Label} returns this
 */
proto.network.forta.AlertEvent.Alert.Label.prototype.setUniquekey = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * optional string alertId = 1;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.prototype.getAlertid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setAlertid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * repeated string addresses = 2;
 * @return {!Array<string>}
 */
proto.network.forta.AlertEvent.Alert.prototype.getAddressesList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setAddressesList = function (value) {
  return jspb.Message.setField(this, 2, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.addAddresses = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.clearAddressesList = function () {
  return this.setAddressesList([])
}

/**
 * repeated Contract contracts = 3;
 * @return {!Array<!proto.network.forta.AlertEvent.Alert.Contract>}
 */
proto.network.forta.AlertEvent.Alert.prototype.getContractsList = function () {
  return /** @type{!Array<!proto.network.forta.AlertEvent.Alert.Contract>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.AlertEvent.Alert.Contract, 3)
  )
}

/**
 * @param {!Array<!proto.network.forta.AlertEvent.Alert.Contract>} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setContractsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value)
}

/**
 * @param {!proto.network.forta.AlertEvent.Alert.Contract=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.AlertEvent.Alert.Contract}
 */
proto.network.forta.AlertEvent.Alert.prototype.addContracts = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.network.forta.AlertEvent.Alert.Contract,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.clearContractsList = function () {
  return this.setContractsList([])
}

/**
 * optional string createdAt = 4;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.prototype.getCreatedat = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setCreatedat = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string description = 5;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.prototype.getDescription = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setDescription = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string hash = 6;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.prototype.getHash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setHash = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * map<string, string> metadata = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.network.forta.AlertEvent.Alert.prototype.getMetadataMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 7, opt_noLazyCreate, null))
}

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.clearMetadataMap = function () {
  this.getMetadataMap().clear()
  return this
}

/**
 * optional string name = 8;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value)
}

/**
 * repeated Project projects = 9;
 * @return {!Array<!proto.network.forta.AlertEvent.Alert.Project>}
 */
proto.network.forta.AlertEvent.Alert.prototype.getProjectsList = function () {
  return /** @type{!Array<!proto.network.forta.AlertEvent.Alert.Project>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.AlertEvent.Alert.Project, 9)
  )
}

/**
 * @param {!Array<!proto.network.forta.AlertEvent.Alert.Project>} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setProjectsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value)
}

/**
 * @param {!proto.network.forta.AlertEvent.Alert.Project=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.AlertEvent.Alert.Project}
 */
proto.network.forta.AlertEvent.Alert.prototype.addProjects = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    9,
    opt_value,
    proto.network.forta.AlertEvent.Alert.Project,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.clearProjectsList = function () {
  return this.setProjectsList([])
}

/**
 * optional int32 scanNodeCount = 10;
 * @return {number}
 */
proto.network.forta.AlertEvent.Alert.prototype.getScannodecount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setScannodecount = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value)
}

/**
 * optional string severity = 11;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.prototype.getSeverity = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setSeverity = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value)
}

/**
 * optional Source source = 12;
 * @return {?proto.network.forta.AlertEvent.Alert.Source}
 */
proto.network.forta.AlertEvent.Alert.prototype.getSource = function () {
  return /** @type{?proto.network.forta.AlertEvent.Alert.Source} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.AlertEvent.Alert.Source, 12)
  )
}

/**
 * @param {?proto.network.forta.AlertEvent.Alert.Source|undefined} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setSource = function (value) {
  return jspb.Message.setWrapperField(this, 12, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.clearSource = function () {
  return this.setSource(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.AlertEvent.Alert.prototype.hasSource = function () {
  return jspb.Message.getField(this, 12) != null
}

/**
 * optional string findingType = 13;
 * @return {string}
 */
proto.network.forta.AlertEvent.Alert.prototype.getFindingtype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ''))
}

/**
 * @param {string} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setFindingtype = function (value) {
  return jspb.Message.setProto3StringField(this, 13, value)
}

/**
 * repeated string relatedAlerts = 14;
 * @return {!Array<string>}
 */
proto.network.forta.AlertEvent.Alert.prototype.getRelatedalertsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14))
}

/**
 * @param {!Array<string>} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setRelatedalertsList = function (value) {
  return jspb.Message.setField(this, 14, value || [])
}

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.addRelatedalerts = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.clearRelatedalertsList = function () {
  return this.setRelatedalertsList([])
}

/**
 * optional uint64 chainId = 15;
 * @return {number}
 */
proto.network.forta.AlertEvent.Alert.prototype.getChainid = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0))
}

/**
 * @param {number} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setChainid = function (value) {
  return jspb.Message.setProto3IntField(this, 15, value)
}

/**
 * repeated Label labels = 16;
 * @return {!Array<!proto.network.forta.AlertEvent.Alert.Label>}
 */
proto.network.forta.AlertEvent.Alert.prototype.getLabelsList = function () {
  return /** @type{!Array<!proto.network.forta.AlertEvent.Alert.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.network.forta.AlertEvent.Alert.Label, 16)
  )
}

/**
 * @param {!Array<!proto.network.forta.AlertEvent.Alert.Label>} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setLabelsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value)
}

/**
 * @param {!proto.network.forta.AlertEvent.Alert.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.network.forta.AlertEvent.Alert.Label}
 */
proto.network.forta.AlertEvent.Alert.prototype.addLabels = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    16,
    opt_value,
    proto.network.forta.AlertEvent.Alert.Label,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.clearLabelsList = function () {
  return this.setLabelsList([])
}

/**
 * optional bool truncated = 17;
 * @return {boolean}
 */
proto.network.forta.AlertEvent.Alert.prototype.getTruncated = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false))
}

/**
 * @param {boolean} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setTruncated = function (value) {
  return jspb.Message.setProto3BooleanField(this, 17, value)
}

/**
 * optional BloomFilter addressBloomFilter = 18;
 * @return {?proto.network.forta.BloomFilter}
 */
proto.network.forta.AlertEvent.Alert.prototype.getAddressbloomfilter = function () {
  return /** @type{?proto.network.forta.BloomFilter} */ (jspb.Message.getWrapperField(this, alert_pb.BloomFilter, 18))
}

/**
 * @param {?proto.network.forta.BloomFilter|undefined} value
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.setAddressbloomfilter = function (value) {
  return jspb.Message.setWrapperField(this, 18, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.AlertEvent.Alert} returns this
 */
proto.network.forta.AlertEvent.Alert.prototype.clearAddressbloomfilter = function () {
  return this.setAddressbloomfilter(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.AlertEvent.Alert.prototype.hasAddressbloomfilter = function () {
  return jspb.Message.getField(this, 18) != null
}

/**
 * optional Alert alert = 1;
 * @return {?proto.network.forta.AlertEvent.Alert}
 */
proto.network.forta.AlertEvent.prototype.getAlert = function () {
  return /** @type{?proto.network.forta.AlertEvent.Alert} */ (
    jspb.Message.getWrapperField(this, proto.network.forta.AlertEvent.Alert, 1)
  )
}

/**
 * @param {?proto.network.forta.AlertEvent.Alert|undefined} value
 * @return {!proto.network.forta.AlertEvent} returns this
 */
proto.network.forta.AlertEvent.prototype.setAlert = function (value) {
  return jspb.Message.setWrapperField(this, 1, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.AlertEvent} returns this
 */
proto.network.forta.AlertEvent.prototype.clearAlert = function () {
  return this.setAlert(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.AlertEvent.prototype.hasAlert = function () {
  return jspb.Message.getField(this, 1) != null
}

/**
 * optional TrackingTimestamps timestamps = 2;
 * @return {?proto.network.forta.TrackingTimestamps}
 */
proto.network.forta.AlertEvent.prototype.getTimestamps = function () {
  return /** @type{?proto.network.forta.TrackingTimestamps} */ (
    jspb.Message.getWrapperField(this, alert_pb.TrackingTimestamps, 2)
  )
}

/**
 * @param {?proto.network.forta.TrackingTimestamps|undefined} value
 * @return {!proto.network.forta.AlertEvent} returns this
 */
proto.network.forta.AlertEvent.prototype.setTimestamps = function (value) {
  return jspb.Message.setWrapperField(this, 2, value)
}

/**
 * Clears the message field making it undefined.
 * @return {!proto.network.forta.AlertEvent} returns this
 */
proto.network.forta.AlertEvent.prototype.clearTimestamps = function () {
  return this.setTimestamps(undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.network.forta.AlertEvent.prototype.hasTimestamps = function () {
  return jspb.Message.getField(this, 2) != null
}

/**
 * @enum {number}
 */
proto.network.forta.ResponseStatus = {
  UNKNOWN: 0,
  ERROR: 1,
  SUCCESS: 2,
}

goog.object.extend(exports, proto.network.forta)
