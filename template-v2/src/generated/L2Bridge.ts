/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common'

export interface L2BridgeInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'DEPOSITS_DISABLER_ROLE()': FunctionFragment
    'DEPOSITS_ENABLER_ROLE()': FunctionFragment
    'WITHDRAWALS_DISABLER_ROLE()': FunctionFragment
    'WITHDRAWALS_ENABLER_ROLE()': FunctionFragment
    'arbSys()': FunctionFragment
    'calculateL2TokenAddress(address)': FunctionFragment
    'counterpartGateway()': FunctionFragment
    'disableDeposits()': FunctionFragment
    'disableWithdrawals()': FunctionFragment
    'enableDeposits()': FunctionFragment
    'enableWithdrawals()': FunctionFragment
    'finalizeInboundTransfer(address,address,address,uint256,bytes)': FunctionFragment
    'getOutboundCalldata(address,address,address,uint256,bytes)': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'initialize(address)': FunctionFragment
    'isDepositsEnabled()': FunctionFragment
    'isInitialized()': FunctionFragment
    'isWithdrawalsEnabled()': FunctionFragment
    'l1Token()': FunctionFragment
    'l2Token()': FunctionFragment
    'outboundTransfer(address,address,uint256,uint256,uint256,bytes)': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'router()': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'DEPOSITS_DISABLER_ROLE'
      | 'DEPOSITS_ENABLER_ROLE'
      | 'WITHDRAWALS_DISABLER_ROLE'
      | 'WITHDRAWALS_ENABLER_ROLE'
      | 'arbSys'
      | 'calculateL2TokenAddress'
      | 'counterpartGateway'
      | 'disableDeposits'
      | 'disableWithdrawals'
      | 'enableDeposits'
      | 'enableWithdrawals'
      | 'finalizeInboundTransfer'
      | 'getOutboundCalldata'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'initialize'
      | 'isDepositsEnabled'
      | 'isInitialized'
      | 'isWithdrawalsEnabled'
      | 'l1Token'
      | 'l2Token'
      | 'outboundTransfer'
      | 'renounceRole'
      | 'revokeRole'
      | 'router'
      | 'supportsInterface',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'DEPOSITS_DISABLER_ROLE',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'DEPOSITS_ENABLER_ROLE',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'WITHDRAWALS_DISABLER_ROLE',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'WITHDRAWALS_ENABLER_ROLE',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'arbSys', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'calculateL2TokenAddress',
    values: [string],
  ): string
  encodeFunctionData(
    functionFragment: 'counterpartGateway',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'disableDeposits',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'disableWithdrawals',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'enableDeposits',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'enableWithdrawals',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'finalizeInboundTransfer',
    values: [string, string, string, BigNumberish, BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'getOutboundCalldata',
    values: [string, string, string, BigNumberish, BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string],
  ): string
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string],
  ): string
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string
  encodeFunctionData(
    functionFragment: 'isDepositsEnabled',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'isInitialized',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'isWithdrawalsEnabled',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'l1Token', values?: undefined): string
  encodeFunctionData(functionFragment: 'l2Token', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'outboundTransfer',
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string],
  ): string
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string],
  ): string
  encodeFunctionData(functionFragment: 'router', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string

  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'DEPOSITS_DISABLER_ROLE',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'DEPOSITS_ENABLER_ROLE',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'WITHDRAWALS_DISABLER_ROLE',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'WITHDRAWALS_ENABLER_ROLE',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'arbSys', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'calculateL2TokenAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'counterpartGateway',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'disableDeposits',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'disableWithdrawals',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'enableDeposits',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'enableWithdrawals',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'finalizeInboundTransfer',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getOutboundCalldata',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isDepositsEnabled',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'isInitialized',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'isWithdrawalsEnabled',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'l1Token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'l2Token', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'outboundTransfer',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result

  events: {
    'DepositFinalized(address,address,address,uint256)': EventFragment
    'DepositsDisabled(address)': EventFragment
    'DepositsEnabled(address)': EventFragment
    'Initialized(address)': EventFragment
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
    'TxToL1(address,address,uint256,bytes)': EventFragment
    'WithdrawalInitiated(address,address,address,uint256,uint256,uint256)': EventFragment
    'WithdrawalsDisabled(address)': EventFragment
    'WithdrawalsEnabled(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'DepositFinalized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositsDisabled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositsEnabled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TxToL1'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawalInitiated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawalsDisabled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawalsEnabled'): EventFragment
}

export interface DepositFinalizedEventObject {
  l1Token: string
  from: string
  to: string
  amount: BigNumber
}
export type DepositFinalizedEvent = TypedEvent<
  [string, string, string, BigNumber],
  DepositFinalizedEventObject
>

export type DepositFinalizedEventFilter =
  TypedEventFilter<DepositFinalizedEvent>

export interface DepositsDisabledEventObject {
  disabler: string
}
export type DepositsDisabledEvent = TypedEvent<
  [string],
  DepositsDisabledEventObject
>

export type DepositsDisabledEventFilter =
  TypedEventFilter<DepositsDisabledEvent>

export interface DepositsEnabledEventObject {
  enabler: string
}
export type DepositsEnabledEvent = TypedEvent<
  [string],
  DepositsEnabledEventObject
>

export type DepositsEnabledEventFilter = TypedEventFilter<DepositsEnabledEvent>

export interface InitializedEventObject {
  admin: string
}
export type InitializedEvent = TypedEvent<[string], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface RoleAdminChangedEventObject {
  role: string
  previousAdminRole: string
  newAdminRole: string
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>

export interface RoleGrantedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export interface RoleRevokedEventObject {
  role: string
  account: string
  sender: string
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export interface TxToL1EventObject {
  from: string
  to: string
  id: BigNumber
  data: string
}
export type TxToL1Event = TypedEvent<
  [string, string, BigNumber, string],
  TxToL1EventObject
>

export type TxToL1EventFilter = TypedEventFilter<TxToL1Event>

export interface WithdrawalInitiatedEventObject {
  l1Token: string
  from: string
  to: string
  l2ToL1Id: BigNumber
  exitNum: BigNumber
  amount: BigNumber
}
export type WithdrawalInitiatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  WithdrawalInitiatedEventObject
>

export type WithdrawalInitiatedEventFilter =
  TypedEventFilter<WithdrawalInitiatedEvent>

export interface WithdrawalsDisabledEventObject {
  disabler: string
}
export type WithdrawalsDisabledEvent = TypedEvent<
  [string],
  WithdrawalsDisabledEventObject
>

export type WithdrawalsDisabledEventFilter =
  TypedEventFilter<WithdrawalsDisabledEvent>

export interface WithdrawalsEnabledEventObject {
  enabler: string
}
export type WithdrawalsEnabledEvent = TypedEvent<
  [string],
  WithdrawalsEnabledEventObject
>

export type WithdrawalsEnabledEventFilter =
  TypedEventFilter<WithdrawalsEnabledEvent>

export interface L2Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: L2BridgeInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    DEPOSITS_DISABLER_ROLE(overrides?: CallOverrides): Promise<[string]>

    DEPOSITS_ENABLER_ROLE(overrides?: CallOverrides): Promise<[string]>

    WITHDRAWALS_DISABLER_ROLE(overrides?: CallOverrides): Promise<[string]>

    WITHDRAWALS_ENABLER_ROLE(overrides?: CallOverrides): Promise<[string]>

    arbSys(overrides?: CallOverrides): Promise<[string]>

    calculateL2TokenAddress(
      l1Token_: string,
      overrides?: CallOverrides,
    ): Promise<[string]>

    counterpartGateway(overrides?: CallOverrides): Promise<[string]>

    disableDeposits(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    disableWithdrawals(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    enableDeposits(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    enableWithdrawals(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    finalizeInboundTransfer(
      l1Token_: string,
      from_: string,
      to_: string,
      amount_: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    getOutboundCalldata(
      l1Token_: string,
      from_: string,
      to_: string,
      amount_: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>

    initialize(
      admin_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    isDepositsEnabled(overrides?: CallOverrides): Promise<[boolean]>

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>

    isWithdrawalsEnabled(overrides?: CallOverrides): Promise<[boolean]>

    l1Token(overrides?: CallOverrides): Promise<[string]>

    l2Token(overrides?: CallOverrides): Promise<[string]>

    outboundTransfer(
      l1Token_: string,
      to_: string,
      amount_: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      data_: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>

    router(overrides?: CallOverrides): Promise<[string]>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>
  }

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  DEPOSITS_DISABLER_ROLE(overrides?: CallOverrides): Promise<string>

  DEPOSITS_ENABLER_ROLE(overrides?: CallOverrides): Promise<string>

  WITHDRAWALS_DISABLER_ROLE(overrides?: CallOverrides): Promise<string>

  WITHDRAWALS_ENABLER_ROLE(overrides?: CallOverrides): Promise<string>

  arbSys(overrides?: CallOverrides): Promise<string>

  calculateL2TokenAddress(
    l1Token_: string,
    overrides?: CallOverrides,
  ): Promise<string>

  counterpartGateway(overrides?: CallOverrides): Promise<string>

  disableDeposits(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  disableWithdrawals(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  enableDeposits(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  enableWithdrawals(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  finalizeInboundTransfer(
    l1Token_: string,
    from_: string,
    to_: string,
    amount_: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  getOutboundCalldata(
    l1Token_: string,
    from_: string,
    to_: string,
    amount_: BigNumberish,
    arg4: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides,
  ): Promise<boolean>

  initialize(
    admin_: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  isDepositsEnabled(overrides?: CallOverrides): Promise<boolean>

  isInitialized(overrides?: CallOverrides): Promise<boolean>

  isWithdrawalsEnabled(overrides?: CallOverrides): Promise<boolean>

  l1Token(overrides?: CallOverrides): Promise<string>

  l2Token(overrides?: CallOverrides): Promise<string>

  outboundTransfer(
    l1Token_: string,
    to_: string,
    amount_: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    data_: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  router(overrides?: CallOverrides): Promise<string>

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    DEPOSITS_DISABLER_ROLE(overrides?: CallOverrides): Promise<string>

    DEPOSITS_ENABLER_ROLE(overrides?: CallOverrides): Promise<string>

    WITHDRAWALS_DISABLER_ROLE(overrides?: CallOverrides): Promise<string>

    WITHDRAWALS_ENABLER_ROLE(overrides?: CallOverrides): Promise<string>

    arbSys(overrides?: CallOverrides): Promise<string>

    calculateL2TokenAddress(
      l1Token_: string,
      overrides?: CallOverrides,
    ): Promise<string>

    counterpartGateway(overrides?: CallOverrides): Promise<string>

    disableDeposits(overrides?: CallOverrides): Promise<void>

    disableWithdrawals(overrides?: CallOverrides): Promise<void>

    enableDeposits(overrides?: CallOverrides): Promise<void>

    enableWithdrawals(overrides?: CallOverrides): Promise<void>

    finalizeInboundTransfer(
      l1Token_: string,
      from_: string,
      to_: string,
      amount_: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>

    getOutboundCalldata(
      l1Token_: string,
      from_: string,
      to_: string,
      amount_: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<boolean>

    initialize(admin_: string, overrides?: CallOverrides): Promise<void>

    isDepositsEnabled(overrides?: CallOverrides): Promise<boolean>

    isInitialized(overrides?: CallOverrides): Promise<boolean>

    isWithdrawalsEnabled(overrides?: CallOverrides): Promise<boolean>

    l1Token(overrides?: CallOverrides): Promise<string>

    l2Token(overrides?: CallOverrides): Promise<string>

    outboundTransfer(
      l1Token_: string,
      to_: string,
      amount_: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      data_: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<void>

    router(overrides?: CallOverrides): Promise<string>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>
  }

  filters: {
    'DepositFinalized(address,address,address,uint256)'(
      l1Token?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
    ): DepositFinalizedEventFilter
    DepositFinalized(
      l1Token?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
    ): DepositFinalizedEventFilter

    'DepositsDisabled(address)'(
      disabler?: string | null,
    ): DepositsDisabledEventFilter
    DepositsDisabled(disabler?: string | null): DepositsDisabledEventFilter

    'DepositsEnabled(address)'(
      enabler?: string | null,
    ): DepositsEnabledEventFilter
    DepositsEnabled(enabler?: string | null): DepositsEnabledEventFilter

    'Initialized(address)'(admin?: string | null): InitializedEventFilter
    Initialized(admin?: string | null): InitializedEventFilter

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter

    'TxToL1(address,address,uint256,bytes)'(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null,
      data?: null,
    ): TxToL1EventFilter
    TxToL1(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null,
      data?: null,
    ): TxToL1EventFilter

    'WithdrawalInitiated(address,address,address,uint256,uint256,uint256)'(
      l1Token?: null,
      from?: string | null,
      to?: string | null,
      l2ToL1Id?: BigNumberish | null,
      exitNum?: null,
      amount?: null,
    ): WithdrawalInitiatedEventFilter
    WithdrawalInitiated(
      l1Token?: null,
      from?: string | null,
      to?: string | null,
      l2ToL1Id?: BigNumberish | null,
      exitNum?: null,
      amount?: null,
    ): WithdrawalInitiatedEventFilter

    'WithdrawalsDisabled(address)'(
      disabler?: string | null,
    ): WithdrawalsDisabledEventFilter
    WithdrawalsDisabled(
      disabler?: string | null,
    ): WithdrawalsDisabledEventFilter

    'WithdrawalsEnabled(address)'(
      enabler?: string | null,
    ): WithdrawalsEnabledEventFilter
    WithdrawalsEnabled(enabler?: string | null): WithdrawalsEnabledEventFilter
  }

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    DEPOSITS_DISABLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    DEPOSITS_ENABLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    WITHDRAWALS_DISABLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    WITHDRAWALS_ENABLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    arbSys(overrides?: CallOverrides): Promise<BigNumber>

    calculateL2TokenAddress(
      l1Token_: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    counterpartGateway(overrides?: CallOverrides): Promise<BigNumber>

    disableDeposits(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    disableWithdrawals(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    enableDeposits(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    enableWithdrawals(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    finalizeInboundTransfer(
      l1Token_: string,
      from_: string,
      to_: string,
      amount_: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    getOutboundCalldata(
      l1Token_: string,
      from_: string,
      to_: string,
      amount_: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    initialize(
      admin_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    isDepositsEnabled(overrides?: CallOverrides): Promise<BigNumber>

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>

    isWithdrawalsEnabled(overrides?: CallOverrides): Promise<BigNumber>

    l1Token(overrides?: CallOverrides): Promise<BigNumber>

    l2Token(overrides?: CallOverrides): Promise<BigNumber>

    outboundTransfer(
      l1Token_: string,
      to_: string,
      amount_: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      data_: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>

    router(overrides?: CallOverrides): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    DEPOSITS_DISABLER_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    DEPOSITS_ENABLER_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    WITHDRAWALS_DISABLER_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    WITHDRAWALS_ENABLER_ROLE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    arbSys(overrides?: CallOverrides): Promise<PopulatedTransaction>

    calculateL2TokenAddress(
      l1Token_: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    counterpartGateway(overrides?: CallOverrides): Promise<PopulatedTransaction>

    disableDeposits(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    disableWithdrawals(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    enableDeposits(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    enableWithdrawals(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    finalizeInboundTransfer(
      l1Token_: string,
      from_: string,
      to_: string,
      amount_: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    getOutboundCalldata(
      l1Token_: string,
      from_: string,
      to_: string,
      amount_: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    initialize(
      admin_: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    isDepositsEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isWithdrawalsEnabled(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    l1Token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    l2Token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    outboundTransfer(
      l1Token_: string,
      to_: string,
      amount_: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      data_: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
